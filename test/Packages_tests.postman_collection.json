{
	"info": {
		"_postman_id": "ccbb5932-61ac-4227-94bf-410b44a77fd7",
		"name": "Packages tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "{package Id}",
			"item": [
				{
					"name": "Return a Package by Package ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages/:packageId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								":packageId"
							],
							"variable": [
								{
									"key": "packageId",
									"value": "21",
									"type": "string",
									"description": "(Required) A path parameter that indentifies a Package"
								}
							]
						}
					},
					"response": [
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"packageId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Merge updates to a Package",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								":packageId"
							],
							"query": [
								{
									"key": "projection",
									"value": "<string>",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "<string>",
									"description": "Additional properties to include in the response.\n"
								}
							],
							"variable": [
								{
									"id": "06d07ad1-2fe2-432a-9076-dd3f27ac1079",
									"key": "packageId",
									"value": "<integer>",
									"type": "string",
									"description": "(Required) A path parameter that indentifies a Package"
								}
							]
						}
					},
					"response": [
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"packageId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Delete a Package",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								":packageId"
							],
							"query": [
								{
									"key": "projection",
									"value": "<string>",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "<string>",
									"description": "Additional properties to include in the response.\n"
								}
							],
							"variable": [
								{
									"id": "d9a46ed9-f4e6-4ba3-8bc6-14f560c19100",
									"key": "packageId",
									"value": "<integer>",
									"type": "string",
									"description": "(Required) A path parameter that indentifies a Package"
								}
							]
						}
					},
					"response": [
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"packageId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "037213a8-cc6b-4171-bb3b-4994bc51ff93",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4ecd15c3-df0a-4248-86e5-1360e0f65f00",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Packages - Admin- no projections",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b810e6b7-15de-43a3-95cb-5964f9d86735",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var user = pm.environment.get(\"user\");",
									"console.log(\"user: \" + user);",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request;",
									"console.log(stuff);",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"var allowedPackages;",
									"switch(user) {",
									"    case \"admin\":",
									"        allowedPackages = JSON.parse(pm.environment.get(\"admin packages\"));",
									"        console.log(\"user is admin\");",
									"        break;",
									"    case \"wf60\":",
									"         allowedPackages = JSON.parse(pm.environment.get(\"wf60 packages\"));",
									"         console.log(\"user is wf60\");",
									"         break;",
									"    case \"wf10\":",
									"         allowedPackages = JSON.parse(pm.environment.get(\"wf10 packages\"));",
									"         console.log(\"user is wf60\");",
									"         break;",
									"    case \"officer60\":",
									"         allowedPackages = JSON.parse(pm.environment.get(\"officer60 packages\"));",
									"         console.log(\"user is wf60\");",
									"         break;",
									"    case \"officer10\":",
									"         allowedPackages = JSON.parse(pm.environment.get(\"officer10 packages\"));",
									"         console.log(\"user is wf60\");",
									"         break;",
									"    case \"staff\":",
									"         allowedPackages = JSON.parse(pm.environment.get(\"admin packages\"));",
									"         console.log(\"user is wf60\");",
									"         break;         ",
									"    ",
									"}",
									"",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an array\", function () {",
									"    pm.expect(jsonData).to.be.an( 'array' ); ",
									"});",
									"",
									"var packageIds = [];",
									"pm.test(\"Response JSON is an array THAT INCLUDES exact packageIds\", function () {",
									"        jsonData.forEach( function (item) {",
									"            pm.expect(item).to.have.property('packageId'); ",
									"            packageIds.push(item.packageId);",
									"        });",
									"        ",
									"    pm.expect(packageIds).to.include.members(allowedPackages);",
									"});",
									"",
									"console.log(\"packageIds = \" + packageIds);",
									"",
									"pm.test(\"Response JSON is an array THAT INCLUDES proper packageIds\", function () {",
									"    jsonData.forEach( function (item) {",
									"    console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.be.oneOf(allowedPackages); ",
									"    });",
									"});",
									"",
									"// pm.test(\"Response testJson is an array THAT INCLUDES\", function () {",
									"//     testJson = [",
									"//         {\"packageId\":21",
									"// //        ,'other': 'ok'",
									"//         },",
									"//         {\"packageId\":22",
									"//  //        ,'other': 'not ok'            ",
									"//         }",
									"//         ]",
									"//     pm.expect(testJson).to.be.an( 'array' ).that.has.deep.includes({'packageId':21}); ",
									"// //    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"// //   pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"    ",
									"// });",
									"",
									"",
									"// console.log(jsonData);",
									"// pm.test(\"Response has 3 objects (expected to fail)\", function () {",
									"//     pm.expect(jsonData).to.have.length(4);",
									"",
									"// });",
									"",
									"pm.test(\"response has 3 items\", function () {",
									"    pm.expect(jsonData).to.have.property('length',allowedPackages.length);",
									"});",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.property('packageId');",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.key('packageId');",
									"// });",
									"",
									"pm.test(\"check for package id 21\", function () {",
									"    pm.expect(jsonData[0]).to.have.property('packageId',21);",
									"});",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c061e81c-5d9e-4d35-883e-d4687b5062ad",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							]
						}
					},
					"response": [
						{
							"name": "Return a list of Packages accessible to the requester",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Tue, 14 Apr 2020 20:14:16 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Packages - no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Apr 2020 02:52:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n },\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n }\n]"
						},
						{
							"name": "Packages - Admin- no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Cache-control",
									"value": "no-store"
								},
								{
									"key": "Date",
									"value": "Tue, 28 Apr 2020 20:27:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						}
					]
				},
				{
					"name": "Packages - Admin- with Projections",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e7ce782-432d-4ac7-aac0-d491ddbd3b0a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var user = pm.environment.get(\"user\");",
									"if (pm.request.url.getQueryString().match(/elevate=true/)){",
									"    user = \"elevated\";",
									"}",
									"// console.log(\"url: \" + pm.request.url.getQueryString().match(/elevate=true/));",
									"console.log(\"user: \" + user);",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request.url.query;",
									"console.log(\"stuff:\" + stuff);",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"let allowedPackages, disallowedPackages, validStigs, invalidStigs, validAssets, invalidAssets;",
									"console.log (\"assignments\")",
									"allowedPackages = JSON.parse(pm.environment.get((\"packages.valid.\" + user)));",
									"disallowedPackages = JSON.parse(pm.environment.get(\"packages.invalid.\" + user));",
									"validStigs = JSON.parse(pm.environment.get(\"stigs.valid.\" + user));",
									"invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid.\" + user));     ",
									"validAssets = JSON.parse(pm.environment.get(\"assets.valid.\" + user));",
									"invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid.\" + user));       ",
									"console.log(\"user is \" + user);",
									"",
									"",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an array\", function () {",
									"    pm.expect(jsonData).to.be.an( 'array' ); ",
									"});",
									"",
									"let packageIds = [];",
									"let assetIds = [];",
									"let stigIds = [];",
									"pm.test(\"Each item in response has proper properties\", function () {",
									"        jsonData.forEach( function (item) {",
									"            pm.expect(item).to.have.property('packageId'); ",
									"            packageIds.push(item.packageId);",
									"            // console.log (item.assets);",
									"            // let assets = [];",
									"            // assets = item.assets;",
									"            // console.log (assets);",
									"            item.assets.forEach( function (asset) {",
									"                pm.expect(asset).to.have.property('assetId');",
									"                assetIds.push(asset.assetId);",
									"            });",
									"            ",
									"            item.stigs.forEach( function (stig) {",
									"                pm.expect(stig).to.have.property('benchmarkId'); ",
									"                stigIds.push(stig.benchmarkId);",
									"            });",
									"        ",
									"        });",
									"        ",
									"//     pm.expect(packageIds).to.include.members(allowedPackages);",
									"});",
									"",
									"console.log(\"packageIds = \" + packageIds);",
									"",
									"pm.test(\"Response contains VALID packageIds for this user\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.be.oneOf(allowedPackages); ",
									"    });",
									"});",
									"",
									"pm.test(\"Response does NOT contain INvalid packageIds for this user\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.not.be.oneOf(disallowedPackages); ",
									"    });",
									"});",
									"",
									"pm.test(\"Every user should fail this test (pacakgeId does not exist in system)\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.be.oneOf(JSON.parse(pm.environment.get(\"packageThatDoesNotExist\"))); ",
									"    });",
									"});",
									"",
									"",
									"if (user == \"wf60\" || user == \"officer60\"){",
									"    pm.test(\"Response contains valid projection data (assets)\", function () {",
									"        assetIds.forEach( function (assetId) {",
									"                pm.expect(assetId).to.be.oneOf(validAssets); ",
									"                console.log(\"checking assetId: \" + assetId);",
									"        });",
									"    });",
									"    ",
									"    pm.test(\"Response contains valid projection data (stigs)\", function () {",
									"            stigIds.forEach( function (stigId) {",
									"                pm.expect(stigId).to.be.oneOf(validStigs); ",
									"                console.log(\"checking stigId: \" + stigId);",
									"        });",
									"    });",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"// pm.test(\"Response testJson is an array THAT INCLUDES\", function () {",
									"//     testJson = [",
									"//         {\"packageId\":21",
									"// //        ,'other': 'ok'",
									"//         },",
									"//         {\"packageId\":22",
									"//  //        ,'other': 'not ok'            ",
									"//         }",
									"//         ]",
									"//     pm.expect(testJson).to.be.an( 'array' ).that.has.deep.includes({'packageId':21}); ",
									"// //    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"// //   pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"    ",
									"// });",
									"",
									"",
									"// console.log(jsonData);",
									"// pm.test(\"Response has 3 objects (expected to fail)\", function () {",
									"//     pm.expect(jsonData).to.have.length(4);",
									"",
									"// });",
									"",
									"// pm.test(\"response has 3 items\", function () {",
									"//     pm.expect(jsonData).to.have.property('length',allowedPackages.length);",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.property('packageId');",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.key('packageId');",
									"// });",
									"",
									"// pm.test(\"check for package id 21\", function () {",
									"//     pm.expect(jsonData[0]).to.have.property('packageId',21);",
									"// });",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "909fdb8a-a773-4394-9a1a-291b39ecfcbd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages?projection=assets&projection=stigs&elevate=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								},
								{
									"key": "elevate",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"name": "Return a list of Packages accessible to the requester",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Tue, 14 Apr 2020 20:14:16 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "Packages - no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Apr 2020 02:52:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n },\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n }\n]"
						},
						{
							"name": "Packages - Admin- no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Cache-control",
									"value": "no-store"
								},
								{
									"key": "Date",
									"value": "Tue, 28 Apr 2020 20:27:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "packages/{packageId} admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f05adcc-fe86-4590-8a98-5646b97b9e06",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var user = pm.environment.get(\"user\");",
									"console.log(\"user: \" + user);",
									"user = pm.environment.get(\"user\");",
									"if (pm.request.url.getQueryString().match(/elevate=true/)){",
									"    user = \"elevated\";",
									"}",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request;",
									"console.log(stuff);",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an object\", function () {",
									"    pm.expect(jsonData).to.be.an( 'object' ); ",
									"});",
									"",
									"let testPackage = JSON.parse(pm.environment.get((\"testPackage\")));",
									"pm.test(\"Response JSON is an object with packageId\", function () {",
									"    pm.expect(jsonData).to.have.deep.property('packageId',testPackage); ",
									"});",
									"",
									"let allowedPackages, disallowedPackages, validStigs, invalidStigs, validAssets, invalidAssets;",
									"console.log (\"user is \" + user);",
									"allowedPackages = JSON.parse(pm.environment.get((\"packages.valid.\" + user)));",
									"disallowedPackages = JSON.parse(pm.environment.get(\"packages.invalid.\" + user));",
									"validStigs = JSON.parse(pm.environment.get(\"stigs.valid.\" + user));",
									"invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid.\" + user));     ",
									"validAssets = JSON.parse(pm.environment.get(\"assets.valid.\" + user));",
									"invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid.\" + user));       ",
									"console.log(\"user is \" + user);",
									"",
									"let packageIds = [];",
									"let assetIds = [];",
									"let stigIds = [];",
									"pm.test(\"Each item in response has packageId\", function () {",
									"    pm.expect(jsonData).to.have.property('packageId'); ",
									"    packageIds.push(jsonData.packageId);",
									"    jsonData.assets.forEach( function (asset) {",
									"        pm.expect(asset).to.have.property('assetId'); ",
									"        assetIds.push(asset.assetId);",
									"    });",
									"    jsonData.stigs.forEach( function (stig) {",
									"        pm.expect(stig).to.have.property('benchmarkId'); ",
									"        stigIds.push(stig.benchmarkId);",
									"    });",
									"    // pm.expect(packageIds).to.include.oneOf(allowedPackages);",
									"});",
									"",
									"console.log(\"packageIds = \" + packageIds);",
									"",
									"pm.test(\"Response contains VALID packageIds for this user\", function () {",
									"    // jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(jsonData.packageId).to.be.oneOf(allowedPackages); ",
									"    // });",
									"});",
									"",
									"pm.test(\"Response does NOT contain INvalid packageIds for this user\", function () {",
									"    // jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(jsonData.packageId).to.not.be.oneOf(disallowedPackages); ",
									"    // });",
									"});",
									"",
									"pm.test(\"Every user should fail this test (pacakgeId does not exist in system)\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.be.oneOf(JSON.parse(pm.environment.get(\"packageThatDoesNotExist\"))); ",
									"    });",
									"});",
									"",
									"",
									"if (user == \"wf60\" || user == \"officer60\"){",
									"    pm.test(\"Response contains valid projection data (assets)\", function () {",
									"        assetIds.forEach( function (assetId) {",
									"                pm.expect(assetId).to.be.oneOf(validAssets); ",
									"                console.log(\"checking assetId: \" + assetId);",
									"        });",
									"    });",
									"    ",
									"    pm.test(\"Response contains valid projection data (stigs)\", function () {",
									"            stigIds.forEach( function (stigId) {",
									"                pm.expect(stigId).to.be.oneOf(validStigs); ",
									"                console.log(\"checking stigId: \" + stigId);",
									"        });",
									"    });",
									"}",
									"",
									"if (user == \"wf60\" || user == \"officer60\"){",
									"    pm.test(\"checking package assets returned\", function () {",
									"        jsonData.assets.forEach( function (item) {",
									"        console.log(\"checking assetId: \" + item.assetId);",
									"        pm.expect(item.assetId).to.be.oneOf(validAssets); ",
									"        });",
									"        // pm.expect(jsonData.assets).to.deep.include({packageId:21});",
									"    });",
									"    ",
									"}",
									"",
									"",
									"",
									"// pm.test(\"Response testJson is an array THAT INCLUDES\", function () {",
									"//     testJson = [",
									"//         {\"packageId\":21",
									"// //        ,'other': 'ok'",
									"//         },",
									"//         {\"packageId\":22",
									"//  //        ,'other': 'not ok'            ",
									"//         }",
									"//         ]",
									"//     pm.expect(testJson).to.be.an( 'array' ).that.has.deep.includes({'packageId':21}); ",
									"// //    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"// //   pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"    ",
									"// });",
									"",
									"",
									"// console.log(jsonData);",
									"// pm.test(\"Response has 3 objects (expected to fail)\", function () {",
									"//     pm.expect(jsonData).to.have.length(4);",
									"",
									"// });",
									"",
									"// pm.test(\"response has 3 items\", function () {",
									"//     pm.expect(jsonData).to.have.property('length',allowedPackages.length);",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.property('packageId');",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.key('packageId');",
									"// });",
									"",
									"// pm.test(\"check for package id 21\", function () {",
									"//     pm.expect(jsonData[0]).to.have.property('packageId',21);",
									"// });",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages/:packageId?projection=assets&projection=stigs&elevate=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								":packageId"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								},
								{
									"key": "elevate",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "packageId",
									"value": "{{testPackage}}",
									"type": "string",
									"description": "(Required) A path parameter that indentifies a Package"
								}
							]
						}
					},
					"response": [
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"packageId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Packages admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5db5b2f-cebb-4cbd-a707-ae3f8258cf00",
								"exec": [
									"var user = pm.environment.get(\"user\");",
									"console.log(\"user: \" + user);",
									"user = pm.environment.get(\"user\");",
									"if (pm.request.url.getQueryString().match(/elevate=true/)){",
									"    user = \"elevated\";",
									"    console.log(\"user is elevated\");",
									"",
									"}",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request;",
									"console.log(stuff);",
									"",
									"if (user == 'elevated' || user == 'staff'){",
									"    pm.test(\"User is elevated. Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}",
									"else {",
									"    pm.test(\"User is not Staff or elevated. Expected status code is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"    return;",
									"}",
									"",
									"if (pm.response.code == 500){",
									"    console.log(\"Server returned 500\")",
									"    return;",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an object\", function () {",
									"    pm.expect(jsonData).to.be.an( 'object' ); ",
									"});",
									"",
									"let createdPackage = jsonData.packageId;",
									"console.log(\"created package: \" + createdPackage)",
									"pm.environment.set (\"createdPackage\",createdPackage);",
									"",
									"pm.test(`Created Package: ${createdPackage}`, function () {",
									"    pm.expect(createdPackage).to.be.an('number');",
									"});",
									"",
									"// postman.setNextRequest(\"Package delete admin\");",
									"",
									"",
									"",
									"// let allowedPackages, disallowedPackages, validStigs, invalidStigs, validAssets, invalidAssets;",
									"// console.log (\"user is \" + user);",
									"// allowedPackages = JSON.parse(pm.environment.get((\"packages.valid.\" + user)));",
									"// disallowedPackages = JSON.parse(pm.environment.get(\"packages.invalid.\" + user));",
									"// validStigs = JSON.parse(pm.environment.get(\"stigs.valid.\" + user));",
									"// invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid.\" + user));     ",
									"// validAssets = JSON.parse(pm.environment.get(\"assets.valid.\" + user));",
									"// invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid.\" + user));       ",
									"// console.log(\"user is \" + user);",
									"",
									"",
									"",
									"// if (user == 'wf60'){",
									"//     pm.test(\"wf60 - checking package assets returned\", function () {",
									"//         jsonData.assets.forEach( function (item) {",
									"//         console.log(\"checking assetId: \" + item.assetId);",
									"//         pm.expect(item.assetId).to.be.oneOf(allowedAssets); ",
									"//         });",
									"//         // pm.expect(jsonData.assets).to.deep.include({packageId:21});",
									"//     });",
									"    ",
									"// }",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test Package 1\",\r\n  \"emassId\": \"emass1\",\r\n  \"pocName\": \"poc2\",\r\n  \"pocEmail\": \"pocEmail@email.com\",\r\n  \"pocPhone\": \"12342\",\r\n  \"reqRar\": true,\r\n  \"assetIds\": [\r\n    64\r\n  ]\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/packages?projection=assets&projection=stigs&elevate=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								},
								{
									"key": "elevate",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"macCl\": \"<string>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n },\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"macCl\": \"<string>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n }\n]"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "packages/{packageId} admin",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"testPackagePatched\",\r\n  \"pocName\": \"pocPatched\",\r\n  \"pocEmail\": \"emailPatched\",\r\n  \"pocPhone\": \"phonePatched\",\r\n  \"reqRar\": false,\r\n  \"assetIds\": [\r\n    36\r\n  ]\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/packages/:packageId?projection=assets&projection=stigs&elevate=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								":packageId"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "elevate",
									"value": "true"
								}
							],
							"variable": [
								{
									"description": "(Required) A path parameter that indentifies a Package",
									"key": "packageId",
									"type": "string",
									"value": "{{createdPackage}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"packageId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "packages/{packageId} admin",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"testPackagePUT\",\r\n  \"emassId\": \"emassPUT\",\r\n  \"pocName\": \"pocPUT\",\r\n  \"pocEmail\": \"pocEmailPUT\",\r\n  \"pocPhone\": \"pocPhonePUT\",\r\n  \"reqRar\": true,\r\n  \"assetIds\": [\r\n    36\r\n  ]\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/packages/:packageId?projection=assets&projection=stigs&elevate=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								":packageId"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "elevate",
									"value": "true"
								}
							],
							"variable": [
								{
									"description": "(Required) A path parameter that indentifies a Package",
									"key": "packageId",
									"type": "string",
									"value": "{{createdPackage}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"packageId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "packages/{packageId} admin Copy",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"testPackagePatched\",\r\n  \"emassId\": \"emassPUT\",\r\n  \"pocName\": \"pocPatched\",\r\n  \"assetIds\": [\r\n    36\r\n  ]\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/packages/:packageId?projection=assets&projection=stigs&elevate=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								":packageId"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "elevate",
									"value": "true"
								}
							],
							"variable": [
								{
									"description": "(Required) A path parameter that indentifies a Package",
									"key": "packageId",
									"type": "string",
									"value": "{{createdPackage}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"packageId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "Package delete admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b58bde10-df91-40c0-bd8d-1aab64f4c40e",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var user = pm.environment.get(\"user\");",
									"console.log(\"user: \" + user);",
									"user = pm.environment.get(\"user\");",
									"if (pm.request.url.getQueryString().match(/elevate=true/)){",
									"    user = \"elevated\";",
									"}",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request;",
									"console.log(stuff);",
									"",
									"",
									"if (user != \"elevated\"){",
									"    pm.test(\"Status code should be 403\", function () {",
									"        pm.response.to.have.status(403);",
									"    });",
									"    console.log(`Status code: ${pm.response.code}. Either previous test did not create the package, the package has already been deleted, or this user is not authorized to delete this package.`);",
									"    return;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response is an array with one JSON object\", function () {",
									"    pm.expect(jsonData[0]).to.be.an( 'object' ); ",
									"});",
									"",
									"// let createdPackage = jsonData.packageId;",
									"// console.log(\"created package: \" + createdPackage)",
									"// pm.environment.set (\"createdPackage\",createdPackage);",
									"",
									"",
									"// let allowedPackages, disallowedPackages, validStigs, invalidStigs, validAssets, invalidAssets;",
									"// console.log (\"user is \" + user);",
									"// allowedPackages = JSON.parse(pm.environment.get((\"packages.valid.\" + user)));",
									"// disallowedPackages = JSON.parse(pm.environment.get(\"packages.invalid.\" + user));",
									"// validStigs = JSON.parse(pm.environment.get(\"stigs.valid.\" + user));",
									"// invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid.\" + user));     ",
									"// validAssets = JSON.parse(pm.environment.get(\"assets.valid.\" + user));",
									"// invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid.\" + user));       ",
									"// console.log(\"user is \" + user);",
									"",
									"",
									"",
									"// if (user == 'wf60'){",
									"//     pm.test(\"wf60 - checking package assets returned\", function () {",
									"//         jsonData.assets.forEach( function (item) {",
									"//         console.log(\"checking assetId: \" + item.assetId);",
									"//         pm.expect(item.assetId).to.be.oneOf(allowedAssets); ",
									"//         });",
									"//         // pm.expect(jsonData.assets).to.deep.include({packageId:21});",
									"//     });",
									"    ",
									"// }",
									"",
									"",
									"",
									"",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages/:packageId?projection=assets&projection=stigs&elevate=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								":packageId"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "elevate",
									"value": "true"
								}
							],
							"variable": [
								{
									"description": "(Required) A path parameter that indentifies a Package",
									"key": "packageId",
									"type": "string",
									"value": "{{createdPackage}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"packageId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "packages/packageId/checklist Admin",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages/{{testPackage}}/checklists/{{testBenchmark}}/latest",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								"{{testPackage}}",
								"checklists",
								"{{testBenchmark}}",
								"latest"
							]
						},
						"description": "Returns checklist for specified package/benchmark/rev"
					},
					"response": []
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "accessToken",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGSjg2R2NGM2pUYk5MT2NvNE52WmtVQ0lVbWZZQ3FvcXRPUWVNZmJoTmxFIn0.eyJqdGkiOiIyNjkyOGViMS05N2VhLTQ5MDQtOGMzNC02ZGVkNDc4ZGYxNGEiLCJleHAiOjE1OTA3NzM0MDMsIm5iZiI6MCwiaWF0IjoxNTg4MTgxNDAzLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvc3RpZ21hbiIsInN1YiI6ImJmODdhMTZmLTM5ZTYtNDZkOS04OTcxLWYwZWY1MWRkM2Y4NSIsInR5cCI6IkJlYXJlciIsImF6cCI6InN0aWctbWFuYWdlciIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjBhZDIyNzJiLWI5YjgtNGYzNy1hNWIxLTgzMmJmZDRkNzAxMSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiYWRtaW4iLCJ1c2VyIl19LCJzY29wZSI6InByb2ZpbGUgc3RpZy1tYW5hZ2VyIiwibmFtZSI6IkFkbWluIEJ1cmtlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW4iLCJnaXZlbl9uYW1lIjoiQWRtaW4iLCJmYW1pbHlfbmFtZSI6IkJ1cmtlIn0.T6yjXfg97DnR967-7mE9o27lgbiy-xUWmvTsX0HtnW7hVqldJyIiftD45bn6TWnZD6Xla-ToBSql57pCWNURldbpHb-DfqViXLAMbfZii9tpXnDf0pGP3WcAkMf4F0Y9Mw9IaOn_VlzgNhhQchoFvUbxRf8pRncueoTBxQV_LGI",
						"type": "string"
					},
					{
						"key": "tokenType",
						"value": "bearer",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "40a139c2-0528-4b06-a8ef-ee15de700c7c",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"user\", \"admin\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6e4040da-21c9-4813-994d-2e3f8061bcca",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Staff",
			"item": [
				{
					"name": "Packages -Staff- no projections",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ffb7508-8b65-4704-8672-14a1253de770",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var user = pm.environment.get(\"user\");",
									"console.log(\"user: \" + user);",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request;",
									"console.log(stuff);",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"var allowedPackages;",
									"switch(user) {",
									"    case \"admin\":",
									"        allowedPackages = JSON.parse(pm.environment.get(\"admin packages\"));",
									"        console.log(\"user is admin\");",
									"        break;",
									"    case \"wf60\":",
									"         allowedPackages = JSON.parse(pm.environment.get(\"wf60 packages\"));",
									"         console.log(\"user is wf60\");",
									"         break;",
									"    case \"wf10\":",
									"         allowedPackages = JSON.parse(pm.environment.get(\"wf10 packages\"));",
									"         console.log(\"user is wf60\");",
									"         break;",
									"    case \"officer60\":",
									"         allowedPackages = JSON.parse(pm.environment.get(\"officer60 packages\"));",
									"         console.log(\"user is wf60\");",
									"         break;",
									"    case \"officer10\":",
									"         allowedPackages = JSON.parse(pm.environment.get(\"officer10 packages\"));",
									"         console.log(\"user is wf60\");",
									"         break;",
									"    case \"staff\":",
									"         allowedPackages = JSON.parse(pm.environment.get(\"admin packages\"));",
									"         console.log(\"user is wf60\");",
									"         break;         ",
									"    ",
									"}",
									"",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an array\", function () {",
									"    pm.expect(jsonData).to.be.an( 'array' ); ",
									"});",
									"",
									"var packageIds = [];",
									"pm.test(\"Response JSON is an array THAT INCLUDES exact packageIds\", function () {",
									"        jsonData.forEach( function (item) {",
									"            pm.expect(item).to.have.property('packageId'); ",
									"            packageIds.push(item.packageId);",
									"        });",
									"        ",
									"    pm.expect(packageIds).to.include.members(allowedPackages);",
									"});",
									"",
									"console.log(\"packageIds = \" + packageIds);",
									"",
									"pm.test(\"Response JSON is an array THAT INCLUDES proper packageIds\", function () {",
									"    jsonData.forEach( function (item) {",
									"    console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.be.oneOf(allowedPackages); ",
									"    });",
									"});",
									"",
									"// pm.test(\"Response testJson is an array THAT INCLUDES\", function () {",
									"//     testJson = [",
									"//         {\"packageId\":21",
									"// //        ,'other': 'ok'",
									"//         },",
									"//         {\"packageId\":22",
									"//  //        ,'other': 'not ok'            ",
									"//         }",
									"//         ]",
									"//     pm.expect(testJson).to.be.an( 'array' ).that.has.deep.includes({'packageId':21}); ",
									"// //    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"// //   pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"    ",
									"// });",
									"",
									"",
									"// console.log(jsonData);",
									"// pm.test(\"Response has 3 objects (expected to fail)\", function () {",
									"//     pm.expect(jsonData).to.have.length(4);",
									"",
									"// });",
									"",
									"pm.test(\"response has 3 items\", function () {",
									"    pm.expect(jsonData).to.have.property('length',allowedPackages.length);",
									"});",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.property('packageId');",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.key('packageId');",
									"// });",
									"",
									"pm.test(\"check for package id 21\", function () {",
									"    pm.expect(jsonData[0]).to.have.property('packageId',21);",
									"});",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "95d22c0c-b814-486c-90a2-0136b6d5928d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							]
						}
					},
					"response": [
						{
							"name": "Return a list of Packages accessible to the requester",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Tue, 14 Apr 2020 20:14:16 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n },\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n }\n]"
						},
						{
							"name": "Packages - no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Apr 2020 02:52:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "Packages - Admin- no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Cache-control",
									"value": "no-store"
								},
								{
									"key": "Date",
									"value": "Tue, 28 Apr 2020 20:27:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Packages -Staff- with Projections",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18b7ba1e-1733-42d4-83ab-8ca2609b5ec4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var user = pm.environment.get(\"user\");",
									"if (pm.request.url.getQueryString().match(/elevate=true/)){",
									"    user = \"elevated\";",
									"}",
									"// console.log(\"url: \" + pm.request.url.getQueryString().match(/elevate=true/));",
									"console.log(\"user: \" + user);",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request.url.query;",
									"console.log(\"stuff:\" + stuff);",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"let allowedPackages, disallowedPackages, validStigs, invalidStigs, validAssets, invalidAssets;",
									"console.log (\"assignments\")",
									"allowedPackages = JSON.parse(pm.environment.get((\"packages.valid.\" + user)));",
									"disallowedPackages = JSON.parse(pm.environment.get(\"packages.invalid.\" + user));",
									"validStigs = JSON.parse(pm.environment.get(\"stigs.valid.\" + user));",
									"invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid.\" + user));     ",
									"validAssets = JSON.parse(pm.environment.get(\"assets.valid.\" + user));",
									"invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid.\" + user));       ",
									"console.log(\"user is \" + user);",
									"",
									"",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an array\", function () {",
									"    pm.expect(jsonData).to.be.an( 'array' ); ",
									"});",
									"",
									"let packageIds = [];",
									"let assetIds = [];",
									"let stigIds = [];",
									"pm.test(\"Each item in response has proper properties\", function () {",
									"        jsonData.forEach( function (item) {",
									"            pm.expect(item).to.have.property('packageId'); ",
									"            packageIds.push(item.packageId);",
									"            // console.log (item.assets);",
									"            // let assets = [];",
									"            // assets = item.assets;",
									"            // console.log (assets);",
									"            item.assets.forEach( function (asset) {",
									"                pm.expect(asset).to.have.property('assetId');",
									"                assetIds.push(asset.assetId);",
									"            });",
									"            ",
									"            item.stigs.forEach( function (stig) {",
									"                pm.expect(stig).to.have.property('benchmarkId'); ",
									"                stigIds.push(stig.benchmarkId);",
									"            });",
									"        ",
									"        });",
									"        ",
									"//     pm.expect(packageIds).to.include.members(allowedPackages);",
									"});",
									"",
									"console.log(\"packageIds = \" + packageIds);",
									"",
									"pm.test(\"Response contains VALID packageIds for this user\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.be.oneOf(allowedPackages); ",
									"    });",
									"});",
									"",
									"pm.test(\"Response does NOT contain INvalid packageIds for this user\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.not.be.oneOf(disallowedPackages); ",
									"    });",
									"});",
									"",
									"pm.test(\"Every user should fail this test (pacakgeId does not exist in system)\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.be.oneOf(JSON.parse(pm.environment.get(\"packageThatDoesNotExist\"))); ",
									"    });",
									"});",
									"",
									"",
									"if (user == \"wf60\" || user == \"officer60\"){",
									"    pm.test(\"Response contains valid projection data (assets)\", function () {",
									"        assetIds.forEach( function (assetId) {",
									"                pm.expect(assetId).to.be.oneOf(validAssets); ",
									"                console.log(\"checking assetId: \" + assetId);",
									"        });",
									"    });",
									"    ",
									"    pm.test(\"Response contains valid projection data (stigs)\", function () {",
									"            stigIds.forEach( function (stigId) {",
									"                pm.expect(stigId).to.be.oneOf(validStigs); ",
									"                console.log(\"checking stigId: \" + stigId);",
									"        });",
									"    });",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"// pm.test(\"Response testJson is an array THAT INCLUDES\", function () {",
									"//     testJson = [",
									"//         {\"packageId\":21",
									"// //        ,'other': 'ok'",
									"//         },",
									"//         {\"packageId\":22",
									"//  //        ,'other': 'not ok'            ",
									"//         }",
									"//         ]",
									"//     pm.expect(testJson).to.be.an( 'array' ).that.has.deep.includes({'packageId':21}); ",
									"// //    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"// //   pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"    ",
									"// });",
									"",
									"",
									"// console.log(jsonData);",
									"// pm.test(\"Response has 3 objects (expected to fail)\", function () {",
									"//     pm.expect(jsonData).to.have.length(4);",
									"",
									"// });",
									"",
									"// pm.test(\"response has 3 items\", function () {",
									"//     pm.expect(jsonData).to.have.property('length',allowedPackages.length);",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.property('packageId');",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.key('packageId');",
									"// });",
									"",
									"// pm.test(\"check for package id 21\", function () {",
									"//     pm.expect(jsonData[0]).to.have.property('packageId',21);",
									"// });",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15f734b1-c447-405d-ac73-adffe5ed4a7f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages?projection=assets&projection=stigs&elevate=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								},
								{
									"key": "elevate",
									"value": "false"
								}
							]
						}
					},
					"response": [
						{
							"name": "Packages - Admin- no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Cache-control",
									"value": "no-store"
								},
								{
									"key": "Date",
									"value": "Tue, 28 Apr 2020 20:27:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n },\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n }\n]"
						},
						{
							"name": "Packages - no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Apr 2020 02:52:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "Return a list of Packages accessible to the requester",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Tue, 14 Apr 2020 20:14:16 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "packages/{packageId} staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08bb2804-90fd-419b-a3c4-0ba68e826a3a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var user = pm.environment.get(\"user\");",
									"console.log(\"user: \" + user);",
									"user = pm.environment.get(\"user\");",
									"if (pm.request.url.getQueryString().match(/elevate=true/)){",
									"    user = \"elevated\";",
									"}",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request;",
									"console.log(stuff);",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an object\", function () {",
									"    pm.expect(jsonData).to.be.an( 'object' ); ",
									"});",
									"",
									"let testPackage = JSON.parse(pm.environment.get((\"testPackage\")));",
									"pm.test(\"Response JSON is an object with packageId\", function () {",
									"    pm.expect(jsonData).to.have.deep.property('packageId',testPackage); ",
									"});",
									"",
									"let allowedPackages, disallowedPackages, validStigs, invalidStigs, validAssets, invalidAssets;",
									"console.log (\"user is \" + user);",
									"allowedPackages = JSON.parse(pm.environment.get((\"packages.valid.\" + user)));",
									"disallowedPackages = JSON.parse(pm.environment.get(\"packages.invalid.\" + user));",
									"validStigs = JSON.parse(pm.environment.get(\"stigs.valid.\" + user));",
									"invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid.\" + user));     ",
									"validAssets = JSON.parse(pm.environment.get(\"assets.valid.\" + user));",
									"invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid.\" + user));       ",
									"console.log(\"user is \" + user);",
									"",
									"let packageIds = [];",
									"let assetIds = [];",
									"let stigIds = [];",
									"pm.test(\"Each item in response has packageId\", function () {",
									"    pm.expect(jsonData).to.have.property('packageId'); ",
									"    packageIds.push(jsonData.packageId);",
									"    jsonData.assets.forEach( function (asset) {",
									"        pm.expect(asset).to.have.property('assetId'); ",
									"        assetIds.push(asset.assetId);",
									"    });",
									"    jsonData.stigs.forEach( function (stig) {",
									"        pm.expect(stig).to.have.property('benchmarkId'); ",
									"        stigIds.push(stig.benchmarkId);",
									"    });",
									"    // pm.expect(packageIds).to.include.oneOf(allowedPackages);",
									"});",
									"",
									"console.log(\"packageIds = \" + packageIds);",
									"",
									"pm.test(\"Response contains VALID packageIds for this user\", function () {",
									"    // jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(jsonData.packageId).to.be.oneOf(allowedPackages); ",
									"    // });",
									"});",
									"",
									"pm.test(\"Response does NOT contain INvalid packageIds for this user\", function () {",
									"    // jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(jsonData.packageId).to.not.be.oneOf(disallowedPackages); ",
									"    // });",
									"});",
									"",
									"pm.test(\"Every user should fail this test (pacakgeId does not exist in system)\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.be.oneOf(JSON.parse(pm.environment.get(\"packageThatDoesNotExist\"))); ",
									"    });",
									"});",
									"",
									"",
									"if (user == \"wf60\" || user == \"officer60\"){",
									"    pm.test(\"Response contains valid projection data (assets)\", function () {",
									"        assetIds.forEach( function (assetId) {",
									"                pm.expect(assetId).to.be.oneOf(validAssets); ",
									"                console.log(\"checking assetId: \" + assetId);",
									"        });",
									"    });",
									"    ",
									"    pm.test(\"Response contains valid projection data (stigs)\", function () {",
									"            stigIds.forEach( function (stigId) {",
									"                pm.expect(stigId).to.be.oneOf(validStigs); ",
									"                console.log(\"checking stigId: \" + stigId);",
									"        });",
									"    });",
									"}",
									"",
									"if (user == \"wf60\" || user == \"officer60\"){",
									"    pm.test(\"checking package assets returned\", function () {",
									"        jsonData.assets.forEach( function (item) {",
									"        console.log(\"checking assetId: \" + item.assetId);",
									"        pm.expect(item.assetId).to.be.oneOf(validAssets); ",
									"        });",
									"        // pm.expect(jsonData.assets).to.deep.include({packageId:21});",
									"    });",
									"    ",
									"}",
									"",
									"",
									"",
									"// pm.test(\"Response testJson is an array THAT INCLUDES\", function () {",
									"//     testJson = [",
									"//         {\"packageId\":21",
									"// //        ,'other': 'ok'",
									"//         },",
									"//         {\"packageId\":22",
									"//  //        ,'other': 'not ok'            ",
									"//         }",
									"//         ]",
									"//     pm.expect(testJson).to.be.an( 'array' ).that.has.deep.includes({'packageId':21}); ",
									"// //    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"// //   pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"    ",
									"// });",
									"",
									"",
									"// console.log(jsonData);",
									"// pm.test(\"Response has 3 objects (expected to fail)\", function () {",
									"//     pm.expect(jsonData).to.have.length(4);",
									"",
									"// });",
									"",
									"// pm.test(\"response has 3 items\", function () {",
									"//     pm.expect(jsonData).to.have.property('length',allowedPackages.length);",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.property('packageId');",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.key('packageId');",
									"// });",
									"",
									"// pm.test(\"check for package id 21\", function () {",
									"//     pm.expect(jsonData[0]).to.have.property('packageId',21);",
									"// });",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages/:packageId?projection=assets&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								":packageId"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							],
							"variable": [
								{
									"key": "packageId",
									"value": "{{testPackage}}",
									"type": "string",
									"description": "(Required) A path parameter that indentifies a Package"
								}
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"packageId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "Packages staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a62f1f3-0a5a-4b45-86cd-55311510c62c",
								"exec": [
									"var user = pm.environment.get(\"user\");",
									"console.log(\"user: \" + user);",
									"user = pm.environment.get(\"user\");",
									"if (pm.request.url.getQueryString().match(/elevate=true/)){",
									"    user = \"elevated\";",
									"    console.log(\"user is elevated\");",
									"",
									"}",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request;",
									"console.log(stuff);",
									"",
									"if (user == 'elevated' || user == 'staff'){",
									"    pm.test(\"User is elevated. Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}",
									"else {",
									"    pm.test(\"User is not Staff or elevated. Expected status code is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"    return;",
									"}",
									"",
									"",
									"var jsonData = pm.response.json();",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an object\", function () {",
									"    pm.expect(jsonData).to.be.an( 'object' ); ",
									"});",
									"",
									"let createdPackage = jsonData.packageId;",
									"console.log(\"created package: \" + createdPackage)",
									"pm.environment.set (\"createdPackage\",createdPackage);",
									"",
									"pm.test(`Created Package: ${createdPackage}`, function () {",
									"    pm.expect(createdPackage).to.be.an('number');",
									"});",
									"",
									"// postman.setNextRequest(\"Package delete admin\");",
									"",
									"",
									"",
									"// let allowedPackages, disallowedPackages, validStigs, invalidStigs, validAssets, invalidAssets;",
									"// console.log (\"user is \" + user);",
									"// allowedPackages = JSON.parse(pm.environment.get((\"packages.valid.\" + user)));",
									"// disallowedPackages = JSON.parse(pm.environment.get(\"packages.invalid.\" + user));",
									"// validStigs = JSON.parse(pm.environment.get(\"stigs.valid.\" + user));",
									"// invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid.\" + user));     ",
									"// validAssets = JSON.parse(pm.environment.get(\"assets.valid.\" + user));",
									"// invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid.\" + user));       ",
									"// console.log(\"user is \" + user);",
									"",
									"",
									"",
									"// if (user == 'wf60'){",
									"//     pm.test(\"wf60 - checking package assets returned\", function () {",
									"//         jsonData.assets.forEach( function (item) {",
									"//         console.log(\"checking assetId: \" + item.assetId);",
									"//         pm.expect(item.assetId).to.be.oneOf(allowedAssets); ",
									"//         });",
									"//         // pm.expect(jsonData.assets).to.deep.include({packageId:21});",
									"//     });",
									"    ",
									"// }",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test Package 1\",\r\n  \"emassId\": \"emass1\",\r\n  \"pocName\": \"poc2\",\r\n  \"pocEmail\": \"pocEmail@email.com\",\r\n  \"pocPhone\": \"12342\",\r\n  \"reqRar\": true,\r\n  \"assetIds\": [\r\n    63\r\n  ]\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/packages?projection=assets&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							]
						}
					},
					"response": [
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"macCl\": \"<string>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n },\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"macCl\": \"<string>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n }\n]"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "packages/{packageId} staff",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								":packageId"
							],
							"query": [
								{
									"key": "projection",
									"value": "<string>",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "<string>",
									"description": "Additional properties to include in the response.\n"
								}
							],
							"variable": [
								{
									"description": "(Required) A path parameter that indentifies a Package",
									"id": "06d07ad1-2fe2-432a-9076-dd3f27ac1079",
									"key": "packageId",
									"type": "string",
									"value": "<integer>"
								}
							]
						}
					},
					"response": [
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"packageId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Package delete staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b58bde10-df91-40c0-bd8d-1aab64f4c40e",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var user = pm.environment.get(\"user\");",
									"console.log(\"user: \" + user);",
									"user = pm.environment.get(\"user\");",
									"if (pm.request.url.getQueryString().match(/elevate=true/)){",
									"    user = \"elevated\";",
									"}",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request;",
									"console.log(stuff);",
									"",
									"",
									"if (user != \"elevated\"){",
									"    pm.test(\"Status code should be 403\", function () {",
									"        pm.response.to.have.status(403);",
									"    });",
									"    console.log(`Status code: ${pm.response.code}. Either previous test did not create the package, the package has already been deleted, or this user is not authorized to delete this package.`);",
									"    return;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response is an array with one JSON object\", function () {",
									"    pm.expect(jsonData[0]).to.be.an( 'object' ); ",
									"});",
									"",
									"// let createdPackage = jsonData.packageId;",
									"// console.log(\"created package: \" + createdPackage)",
									"// pm.environment.set (\"createdPackage\",createdPackage);",
									"",
									"",
									"// let allowedPackages, disallowedPackages, validStigs, invalidStigs, validAssets, invalidAssets;",
									"// console.log (\"user is \" + user);",
									"// allowedPackages = JSON.parse(pm.environment.get((\"packages.valid.\" + user)));",
									"// disallowedPackages = JSON.parse(pm.environment.get(\"packages.invalid.\" + user));",
									"// validStigs = JSON.parse(pm.environment.get(\"stigs.valid.\" + user));",
									"// invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid.\" + user));     ",
									"// validAssets = JSON.parse(pm.environment.get(\"assets.valid.\" + user));",
									"// invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid.\" + user));       ",
									"// console.log(\"user is \" + user);",
									"",
									"",
									"",
									"// if (user == 'wf60'){",
									"//     pm.test(\"wf60 - checking package assets returned\", function () {",
									"//         jsonData.assets.forEach( function (item) {",
									"//         console.log(\"checking assetId: \" + item.assetId);",
									"//         pm.expect(item.assetId).to.be.oneOf(allowedAssets); ",
									"//         });",
									"//         // pm.expect(jsonData.assets).to.deep.include({packageId:21});",
									"//     });",
									"    ",
									"// }",
									"",
									"",
									"",
									"",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages/:packageId?projection=assets&projection=stigs&elevate=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								":packageId"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "elevate",
									"value": "false"
								}
							],
							"variable": [
								{
									"description": "(Required) A path parameter that indentifies a Package",
									"key": "packageId",
									"type": "string",
									"value": "{{createdPackage}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"packageId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "accessToken",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGSjg2R2NGM2pUYk5MT2NvNE52WmtVQ0lVbWZZQ3FvcXRPUWVNZmJoTmxFIn0.eyJqdGkiOiIyNjkyOGViMS05N2VhLTQ5MDQtOGMzNC02ZGVkNDc4ZGYxNGEiLCJleHAiOjE1OTA3NzM0MDMsIm5iZiI6MCwiaWF0IjoxNTg4MTgxNDAzLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvc3RpZ21hbiIsInN1YiI6ImJmODdhMTZmLTM5ZTYtNDZkOS04OTcxLWYwZWY1MWRkM2Y4NSIsInR5cCI6IkJlYXJlciIsImF6cCI6InN0aWctbWFuYWdlciIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjBhZDIyNzJiLWI5YjgtNGYzNy1hNWIxLTgzMmJmZDRkNzAxMSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiYWRtaW4iLCJ1c2VyIl19LCJzY29wZSI6InByb2ZpbGUgc3RpZy1tYW5hZ2VyIiwibmFtZSI6IkFkbWluIEJ1cmtlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW4iLCJnaXZlbl9uYW1lIjoiQWRtaW4iLCJmYW1pbHlfbmFtZSI6IkJ1cmtlIn0.T6yjXfg97DnR967-7mE9o27lgbiy-xUWmvTsX0HtnW7hVqldJyIiftD45bn6TWnZD6Xla-ToBSql57pCWNURldbpHb-DfqViXLAMbfZii9tpXnDf0pGP3WcAkMf4F0Y9Mw9IaOn_VlzgNhhQchoFvUbxRf8pRncueoTBxQV_LGI",
						"type": "string"
					},
					{
						"key": "tokenType",
						"value": "bearer",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "22942df1-2aa5-42ca-a897-bc74506ed326",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"user\", \"staff\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f890b912-f6bc-4c85-b44e-7c9fb8609830",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "wf60",
			"item": [
				{
					"name": "Packages -wf60- with Projections Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb6cdcb9-8263-41ed-96da-56b06d1e4639",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var user = pm.environment.get(\"user\");",
									"if (pm.request.url.getQueryString().match(/elevate=true/)){",
									"    user = \"elevated\";",
									"}",
									"// console.log(\"url: \" + pm.request.url.getQueryString().match(/elevate=true/));",
									"console.log(\"user: \" + user);",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request.url.query;",
									"console.log(\"stuff:\" + stuff);",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"let allowedPackages, disallowedPackages, validStigs, invalidStigs, validAssets, invalidAssets;",
									"console.log (\"assignments\")",
									"allowedPackages = JSON.parse(pm.environment.get((\"packages.valid.\" + user)));",
									"disallowedPackages = JSON.parse(pm.environment.get(\"packages.invalid.\" + user));",
									"validStigs = JSON.parse(pm.environment.get(\"stigs.valid.\" + user));",
									"invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid.\" + user));     ",
									"validAssets = JSON.parse(pm.environment.get(\"assets.valid.\" + user));",
									"invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid.\" + user));       ",
									"console.log(\"user is \" + user);",
									"",
									"",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an array\", function () {",
									"    pm.expect(jsonData).to.be.an( 'array' ); ",
									"});",
									"",
									"let packageIds = [];",
									"let assetIds = [];",
									"let stigIds = [];",
									"pm.test(\"Each item in response has proper properties\", function () {",
									"        jsonData.forEach( function (item) {",
									"            pm.expect(item).to.have.property('packageId'); ",
									"            packageIds.push(item.packageId);",
									"            // console.log (item.assets);",
									"            // let assets = [];",
									"            // assets = item.assets;",
									"            // console.log (assets);",
									"            item.assets.forEach( function (asset) {",
									"                pm.expect(asset).to.have.property('assetId');",
									"                assetIds.push(asset.assetId);",
									"            });",
									"            ",
									"            item.stigs.forEach( function (stig) {",
									"                pm.expect(stig).to.have.property('benchmarkId'); ",
									"                stigIds.push(stig.benchmarkId);",
									"            });",
									"        ",
									"        });",
									"        ",
									"//     pm.expect(packageIds).to.include.members(allowedPackages);",
									"});",
									"",
									"console.log(\"packageIds = \" + packageIds);",
									"",
									"pm.test(\"Response contains VALID packageIds for this user\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.be.oneOf(allowedPackages); ",
									"    });",
									"});",
									"",
									"pm.test(\"Response does NOT contain INvalid packageIds for this user\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.not.be.oneOf(disallowedPackages); ",
									"    });",
									"});",
									"",
									"pm.test(\"Every user should fail this test (pacakgeId does not exist in system)\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.be.oneOf(JSON.parse(pm.environment.get(\"packageThatDoesNotExist\"))); ",
									"    });",
									"});",
									"",
									"",
									"if (user == \"wf60\" || user == \"officer60\"){",
									"    pm.test(\"Response contains valid projection data (assets)\", function () {",
									"        assetIds.forEach( function (assetId) {",
									"                pm.expect(assetId).to.be.oneOf(validAssets); ",
									"                console.log(\"checking assetId: \" + assetId);",
									"        });",
									"    });",
									"    ",
									"    pm.test(\"Response contains valid projection data (stigs)\", function () {",
									"            stigIds.forEach( function (stigId) {",
									"                pm.expect(stigId).to.be.oneOf(validStigs); ",
									"                console.log(\"checking stigId: \" + stigId);",
									"        });",
									"    });",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"// pm.test(\"Response testJson is an array THAT INCLUDES\", function () {",
									"//     testJson = [",
									"//         {\"packageId\":21",
									"// //        ,'other': 'ok'",
									"//         },",
									"//         {\"packageId\":22",
									"//  //        ,'other': 'not ok'            ",
									"//         }",
									"//         ]",
									"//     pm.expect(testJson).to.be.an( 'array' ).that.has.deep.includes({'packageId':21}); ",
									"// //    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"// //   pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"    ",
									"// });",
									"",
									"",
									"// console.log(jsonData);",
									"// pm.test(\"Response has 3 objects (expected to fail)\", function () {",
									"//     pm.expect(jsonData).to.have.length(4);",
									"",
									"// });",
									"",
									"// pm.test(\"response has 3 items\", function () {",
									"//     pm.expect(jsonData).to.have.property('length',allowedPackages.length);",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.property('packageId');",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.key('packageId');",
									"// });",
									"",
									"// pm.test(\"check for package id 21\", function () {",
									"//     pm.expect(jsonData[0]).to.have.property('packageId',21);",
									"// });",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0d95fd95-ba5e-4e71-9559-6d3e5f361653",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages?projection=assets&projection=stigs&elevate=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								},
								{
									"key": "elevate",
									"value": "false"
								}
							]
						}
					},
					"response": [
						{
							"name": "Packages - no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Apr 2020 02:52:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "Packages - Admin- no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Cache-control",
									"value": "no-store"
								},
								{
									"key": "Date",
									"value": "Tue, 28 Apr 2020 20:27:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n },\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n }\n]"
						},
						{
							"name": "Return a list of Packages accessible to the requester",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Tue, 14 Apr 2020 20:14:16 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "packages/{packageId} wf60",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f05adcc-fe86-4590-8a98-5646b97b9e06",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var user = pm.environment.get(\"user\");",
									"console.log(\"user: \" + user);",
									"user = pm.environment.get(\"user\");",
									"if (pm.request.url.getQueryString().match(/elevate=true/)){",
									"    user = \"elevated\";",
									"}",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request;",
									"console.log(stuff);",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an object\", function () {",
									"    pm.expect(jsonData).to.be.an( 'object' ); ",
									"});",
									"",
									"let testPackage = JSON.parse(pm.environment.get((\"testPackage\")));",
									"pm.test(\"Response JSON is an object with packageId\", function () {",
									"    pm.expect(jsonData).to.have.deep.property('packageId',testPackage); ",
									"});",
									"",
									"let allowedPackages, disallowedPackages, validStigs, invalidStigs, validAssets, invalidAssets;",
									"console.log (\"user is \" + user);",
									"allowedPackages = JSON.parse(pm.environment.get((\"packages.valid.\" + user)));",
									"disallowedPackages = JSON.parse(pm.environment.get(\"packages.invalid.\" + user));",
									"validStigs = JSON.parse(pm.environment.get(\"stigs.valid.\" + user));",
									"invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid.\" + user));     ",
									"validAssets = JSON.parse(pm.environment.get(\"assets.valid.\" + user));",
									"invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid.\" + user));       ",
									"console.log(\"user is \" + user);",
									"",
									"let packageIds = [];",
									"let assetIds = [];",
									"let stigIds = [];",
									"pm.test(\"Each item in response has packageId\", function () {",
									"    pm.expect(jsonData).to.have.property('packageId'); ",
									"    packageIds.push(jsonData.packageId);",
									"    jsonData.assets.forEach( function (asset) {",
									"        pm.expect(asset).to.have.property('assetId'); ",
									"        assetIds.push(asset.assetId);",
									"    });",
									"    jsonData.stigs.forEach( function (stig) {",
									"        pm.expect(stig).to.have.property('benchmarkId'); ",
									"        stigIds.push(stig.benchmarkId);",
									"    });",
									"    pm.expect(packageIds).to.include.members(allowedPackages);",
									"});",
									"",
									"console.log(\"packageIds = \" + packageIds);",
									"",
									"pm.test(\"Response contains VALID packageIds for this user\", function () {",
									"    // jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(jsonData.packageId).to.be.oneOf(allowedPackages); ",
									"    // });",
									"});",
									"",
									"pm.test(\"Response does NOT contain INvalid packageIds for this user\", function () {",
									"    // jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(jsonData.packageId).to.not.be.oneOf(disallowedPackages); ",
									"    // });",
									"});",
									"",
									"pm.test(\"Every user should fail this test (pacakgeId does not exist in system)\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.be.oneOf(JSON.parse(pm.environment.get(\"packageThatDoesNotExist\"))); ",
									"    });",
									"});",
									"",
									"",
									"if (user == \"wf60\" || user == \"officer60\"){",
									"    pm.test(\"Response contains valid projection data (assets)\", function () {",
									"        assetIds.forEach( function (assetId) {",
									"                pm.expect(assetId).to.be.oneOf(validAssets); ",
									"                console.log(\"checking assetId: \" + assetId);",
									"        });",
									"    });",
									"    ",
									"    pm.test(\"Response contains valid projection data (stigs)\", function () {",
									"            stigIds.forEach( function (stigId) {",
									"                pm.expect(stigId).to.be.oneOf(validStigs); ",
									"                console.log(\"checking stigId: \" + stigId);",
									"        });",
									"    });",
									"}",
									"",
									"if (user == \"wf60\" || user == \"officer60\"){",
									"    pm.test(\"checking package assets returned\", function () {",
									"        jsonData.assets.forEach( function (item) {",
									"        console.log(\"checking assetId: \" + item.assetId);",
									"        pm.expect(item.assetId).to.be.oneOf(validAssets); ",
									"        });",
									"        // pm.expect(jsonData.assets).to.deep.include({packageId:21});",
									"    });",
									"    ",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"// pm.test(\"Response testJson is an array THAT INCLUDES\", function () {",
									"//     testJson = [",
									"//         {\"packageId\":21",
									"// //        ,'other': 'ok'",
									"//         },",
									"//         {\"packageId\":22",
									"//  //        ,'other': 'not ok'            ",
									"//         }",
									"//         ]",
									"//     pm.expect(testJson).to.be.an( 'array' ).that.has.deep.includes({'packageId':21}); ",
									"// //    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"// //   pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"    ",
									"// });",
									"",
									"",
									"// console.log(jsonData);",
									"// pm.test(\"Response has 3 objects (expected to fail)\", function () {",
									"//     pm.expect(jsonData).to.have.length(4);",
									"",
									"// });",
									"",
									"// pm.test(\"response has 3 items\", function () {",
									"//     pm.expect(jsonData).to.have.property('length',allowedPackages.length);",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.property('packageId');",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.key('packageId');",
									"// });",
									"",
									"// pm.test(\"check for package id 21\", function () {",
									"//     pm.expect(jsonData[0]).to.have.property('packageId',21);",
									"// });",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages/:packageId?projection=assets&projection=stigs&elevate=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								":packageId"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								},
								{
									"key": "elevate",
									"value": "false"
								}
							],
							"variable": [
								{
									"description": "(Required) A path parameter that indentifies a Package",
									"key": "packageId",
									"type": "string",
									"value": "{{testPackage}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"packageId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Packages wf60",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23683e70-4b67-45d4-acdd-871f8985816b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var user = pm.environment.get(\"user\");",
									"console.log(\"user: \" + user);",
									"user = pm.environment.get(\"user\");",
									"if (pm.request.url.getQueryString().match(/elevate=true/)){",
									"    user = \"elevated\";",
									"}",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request;",
									"console.log(stuff);",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an object\", function () {",
									"    pm.expect(jsonData).to.be.an( 'object' ); ",
									"});",
									"",
									"let createdPackage = jsonData.packageId;",
									"console.log(\"created package: \" + createdPackage)",
									"",
									"",
									"let allowedPackages, disallowedPackages, validStigs, invalidStigs, validAssets, invalidAssets;",
									"console.log (\"user is \" + user);",
									"allowedPackages = JSON.parse(pm.environment.get((\"packages.valid.\" + user)));",
									"disallowedPackages = JSON.parse(pm.environment.get(\"packages.invalid.\" + user));",
									"validStigs = JSON.parse(pm.environment.get(\"stigs.valid.\" + user));",
									"invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid.\" + user));     ",
									"validAssets = JSON.parse(pm.environment.get(\"assets.valid.\" + user));",
									"invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid.\" + user));       ",
									"console.log(\"user is \" + user);",
									"",
									"",
									"",
									"if (user == 'wf60'){",
									"    pm.test(\"wf60 - checking package assets returned\", function () {",
									"        jsonData.assets.forEach( function (item) {",
									"        console.log(\"checking assetId: \" + item.assetId);",
									"        pm.expect(item.assetId).to.be.oneOf(allowedAssets); ",
									"        });",
									"        // pm.expect(jsonData.assets).to.deep.include({packageId:21});",
									"    });",
									"    ",
									"}",
									"",
									"",
									"",
									"",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test Package 1\",\r\n  \"emassId\": \"emass1\",\r\n  \"pocName\": \"poc2\",\r\n  \"pocEmail\": \"pocEmail@email.com\",\r\n  \"pocPhone\": \"12342\",\r\n  \"reqRar\": true,\r\n  \"assetIds\": [\r\n    63\r\n  ]\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/packages?projection=assets&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"macCl\": \"<string>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n },\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"macCl\": \"<string>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n }\n]"
						}
					]
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "accessToken",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGSjg2R2NGM2pUYk5MT2NvNE52WmtVQ0lVbWZZQ3FvcXRPUWVNZmJoTmxFIn0.eyJqdGkiOiI4MjRmZWRkNS1iMTQzLTQ4NTItYmExMy0yMmNiMzViMWM3ZWYiLCJleHAiOjE1OTA4MTUyMTAsIm5iZiI6MCwiaWF0IjoxNTg4MjIzMjEwLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvc3RpZ21hbiIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwMWMzMDdmMS05YTNkLTQzMmYtYjMwZi1mZjhiOTIzNzI2MGQiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJzdGlnLW1hbmFnZXIiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiI0ZDBjODc5Yi05ODViLTQ5ODMtYmZhNi0yYTQ2MDY1ODRmZjEiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbIioiXSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoicHJvZmlsZSBzdGlnLW1hbmFnZXIiLCJuYW1lIjoiQ1NXRiA2MCIsInByZWZlcnJlZF91c2VybmFtZSI6Indvcmtmb3JjZS02MCIsImdpdmVuX25hbWUiOiJDU1dGIiwiZmFtaWx5X25hbWUiOiI2MCJ9.jFQszs288EF-pCAsnj_feUrDNSfwLOoBPx6RQYzB10MCwxS3MTDL8IiBcjhxELLV1Jp259vCOWEmqMJCxkCKYadYQOhpuLUE2PbDtU1j0u5vgNG5o_E5851DPqyOUOK8ICM3x18ufv8ZoMsPXU10J3zVeaxv9x98HPYx-IdmanI",
						"type": "string"
					},
					{
						"key": "tokenType",
						"value": "bearer",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f749678a-e164-4c84-965f-bee39532ebbc",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"user\", \"wf60\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c8764546-444b-41ca-99c0-e04aad263e8c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "officer60",
			"item": [
				{
					"name": "Packages -officer60- with Projection",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2192848-c1c7-4d12-98ec-c9d1aa5257f9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var user = pm.environment.get(\"user\");",
									"if (pm.request.url.getQueryString().match(/elevate=true/)){",
									"    user = \"elevated\";",
									"}",
									"// console.log(\"url: \" + pm.request.url.getQueryString().match(/elevate=true/));",
									"console.log(\"user: \" + user);",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request.url.query;",
									"console.log(\"stuff:\" + stuff);",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"let allowedPackages, disallowedPackages, validStigs, invalidStigs, validAssets, invalidAssets;",
									"console.log (\"assignments\")",
									"allowedPackages = JSON.parse(pm.environment.get((\"packages.valid.\" + user)));",
									"disallowedPackages = JSON.parse(pm.environment.get(\"packages.invalid.\" + user));",
									"validStigs = JSON.parse(pm.environment.get(\"stigs.valid.\" + user));",
									"invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid.\" + user));     ",
									"validAssets = JSON.parse(pm.environment.get(\"assets.valid.\" + user));",
									"invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid.\" + user));       ",
									"console.log(\"user is \" + user);",
									"",
									"",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an array\", function () {",
									"    pm.expect(jsonData).to.be.an( 'array' ); ",
									"});",
									"",
									"let packageIds = [];",
									"let assetIds = [];",
									"let stigIds = [];",
									"pm.test(\"Each item in response has proper properties\", function () {",
									"        jsonData.forEach( function (item) {",
									"            pm.expect(item).to.have.property('packageId'); ",
									"            packageIds.push(item.packageId);",
									"            // console.log (item.assets);",
									"            // let assets = [];",
									"            // assets = item.assets;",
									"            // console.log (assets);",
									"            item.assets.forEach( function (asset) {",
									"                pm.expect(asset).to.have.property('assetId');",
									"                assetIds.push(asset.assetId);",
									"            });",
									"            ",
									"            item.stigs.forEach( function (stig) {",
									"                pm.expect(stig).to.have.property('benchmarkId'); ",
									"                stigIds.push(stig.benchmarkId);",
									"            });",
									"        ",
									"        });",
									"        ",
									"//     pm.expect(packageIds).to.include.members(allowedPackages);",
									"});",
									"",
									"console.log(\"packageIds = \" + packageIds);",
									"",
									"pm.test(\"Response contains VALID packageIds for this user\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.be.oneOf(allowedPackages); ",
									"    });",
									"});",
									"",
									"pm.test(\"Response does NOT contain INvalid packageIds for this user\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.not.be.oneOf(disallowedPackages); ",
									"    });",
									"});",
									"",
									"pm.test(\"Every user should fail this test (pacakgeId does not exist in system)\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.be.oneOf(JSON.parse(pm.environment.get(\"packageThatDoesNotExist\"))); ",
									"    });",
									"});",
									"",
									"",
									"if (user == \"wf60\" || user == \"officer60\"){",
									"    pm.test(\"Response contains valid projection data (assets)\", function () {",
									"        assetIds.forEach( function (assetId) {",
									"                pm.expect(assetId).to.be.oneOf(validAssets); ",
									"                console.log(\"checking assetId: \" + assetId);",
									"        });",
									"    });",
									"    ",
									"    pm.test(\"Response contains valid projection data (stigs)\", function () {",
									"            stigIds.forEach( function (stigId) {",
									"                pm.expect(stigId).to.be.oneOf(validStigs); ",
									"                console.log(\"checking stigId: \" + stigId);",
									"        });",
									"    });",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"// pm.test(\"Response testJson is an array THAT INCLUDES\", function () {",
									"//     testJson = [",
									"//         {\"packageId\":21",
									"// //        ,'other': 'ok'",
									"//         },",
									"//         {\"packageId\":22",
									"//  //        ,'other': 'not ok'            ",
									"//         }",
									"//         ]",
									"//     pm.expect(testJson).to.be.an( 'array' ).that.has.deep.includes({'packageId':21}); ",
									"// //    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"// //   pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"    ",
									"// });",
									"",
									"",
									"// console.log(jsonData);",
									"// pm.test(\"Response has 3 objects (expected to fail)\", function () {",
									"//     pm.expect(jsonData).to.have.length(4);",
									"",
									"// });",
									"",
									"// pm.test(\"response has 3 items\", function () {",
									"//     pm.expect(jsonData).to.have.property('length',allowedPackages.length);",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.property('packageId');",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.key('packageId');",
									"// });",
									"",
									"// pm.test(\"check for package id 21\", function () {",
									"//     pm.expect(jsonData[0]).to.have.property('packageId',21);",
									"// });",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "72ad3fa7-4043-41e8-b5bb-82efc81b39f9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages?elevate=false&projection=assets&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							],
							"query": [
								{
									"key": "elevate",
									"value": "false"
								},
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							]
						}
					},
					"response": [
						{
							"name": "Return a list of Packages accessible to the requester",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Tue, 14 Apr 2020 20:14:16 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "Packages - Admin- no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Cache-control",
									"value": "no-store"
								},
								{
									"key": "Date",
									"value": "Tue, 28 Apr 2020 20:27:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n },\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n }\n]"
						},
						{
							"name": "Packages - no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Apr 2020 02:52:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "packages/{packageId} officer 60",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66d5fdd2-3746-4b97-a582-75ec505c7355",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var user = pm.environment.get(\"user\");",
									"console.log(\"user: \" + user);",
									"user = pm.environment.get(\"user\");",
									"if (pm.request.url.getQueryString().match(/elevate=true/)){",
									"    user = \"elevated\";",
									"}",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request;",
									"console.log(stuff);",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an object\", function () {",
									"    pm.expect(jsonData).to.be.an( 'object' ); ",
									"});",
									"",
									"let testPackage = JSON.parse(pm.environment.get((\"testPackage\")));",
									"pm.test(\"Response JSON is an object with packageId\", function () {",
									"    pm.expect(jsonData).to.have.deep.property('packageId',testPackage); ",
									"});",
									"",
									"let allowedPackages, disallowedPackages, validStigs, invalidStigs, validAssets, invalidAssets;",
									"console.log (\"user is \" + user);",
									"allowedPackages = JSON.parse(pm.environment.get((\"packages.valid.\" + user)));",
									"disallowedPackages = JSON.parse(pm.environment.get(\"packages.invalid.\" + user));",
									"validStigs = JSON.parse(pm.environment.get(\"stigs.valid.\" + user));",
									"invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid.\" + user));     ",
									"validAssets = JSON.parse(pm.environment.get(\"assets.valid.\" + user));",
									"invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid.\" + user));       ",
									"console.log(\"user is \" + user);",
									"",
									"let packageIds = [];",
									"let assetIds = [];",
									"let stigIds = [];",
									"pm.test(\"Each item in response has packageId\", function () {",
									"    pm.expect(jsonData).to.have.property('packageId'); ",
									"    packageIds.push(jsonData.packageId);",
									"    jsonData.assets.forEach( function (asset) {",
									"        pm.expect(asset).to.have.property('assetId'); ",
									"        assetIds.push(asset.assetId);",
									"    });",
									"    jsonData.stigs.forEach( function (stig) {",
									"        pm.expect(stig).to.have.property('benchmarkId'); ",
									"        stigIds.push(stig.benchmarkId);",
									"    });",
									"    // pm.expect(packageIds).to.include.oneOf(allowedPackages);",
									"});",
									"",
									"console.log(\"packageIds = \" + packageIds);",
									"",
									"pm.test(\"Response contains VALID packageIds for this user\", function () {",
									"    // jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(jsonData.packageId).to.be.oneOf(allowedPackages); ",
									"    // });",
									"});",
									"",
									"pm.test(\"Response does NOT contain INvalid packageIds for this user\", function () {",
									"    // jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(jsonData.packageId).to.not.be.oneOf(disallowedPackages); ",
									"    // });",
									"});",
									"",
									"pm.test(\"Every user should fail this test (pacakgeId does not exist in system)\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.be.oneOf(JSON.parse(pm.environment.get(\"packageThatDoesNotExist\"))); ",
									"    });",
									"});",
									"",
									"",
									"if (user == \"wf60\" || user == \"officer60\"){",
									"    pm.test(\"Response contains valid projection data (assets)\", function () {",
									"        assetIds.forEach( function (assetId) {",
									"                pm.expect(assetId).to.be.oneOf(validAssets); ",
									"                console.log(\"checking assetId: \" + assetId);",
									"        });",
									"    });",
									"    ",
									"    pm.test(\"Response contains valid projection data (stigs)\", function () {",
									"            stigIds.forEach( function (stigId) {",
									"                pm.expect(stigId).to.be.oneOf(validStigs); ",
									"                console.log(\"checking stigId: \" + stigId);",
									"        });",
									"    });",
									"}",
									"",
									"if (user == \"wf60\" || user == \"officer60\"){",
									"    pm.test(\"checking package assets returned\", function () {",
									"        jsonData.assets.forEach( function (item) {",
									"        console.log(\"checking assetId: \" + item.assetId);",
									"        pm.expect(item.assetId).to.be.oneOf(validAssets); ",
									"        });",
									"        // pm.expect(jsonData.assets).to.deep.include({packageId:21});",
									"    });",
									"    ",
									"}",
									"",
									"",
									"",
									"// pm.test(\"Response testJson is an array THAT INCLUDES\", function () {",
									"//     testJson = [",
									"//         {\"packageId\":21",
									"// //        ,'other': 'ok'",
									"//         },",
									"//         {\"packageId\":22",
									"//  //        ,'other': 'not ok'            ",
									"//         }",
									"//         ]",
									"//     pm.expect(testJson).to.be.an( 'array' ).that.has.deep.includes({'packageId':21}); ",
									"// //    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"// //   pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"    ",
									"// });",
									"",
									"",
									"// console.log(jsonData);",
									"// pm.test(\"Response has 3 objects (expected to fail)\", function () {",
									"//     pm.expect(jsonData).to.have.length(4);",
									"",
									"// });",
									"",
									"// pm.test(\"response has 3 items\", function () {",
									"//     pm.expect(jsonData).to.have.property('length',allowedPackages.length);",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.property('packageId');",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.key('packageId');",
									"// });",
									"",
									"// pm.test(\"check for package id 21\", function () {",
									"//     pm.expect(jsonData[0]).to.have.property('packageId',21);",
									"// });",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages/:packageId?projection=assets&projection=stigs&elevate=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								":packageId"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								},
								{
									"key": "elevate",
									"value": "false"
								}
							],
							"variable": [
								{
									"description": "(Required) A path parameter that indentifies a Package",
									"key": "packageId",
									"type": "string",
									"value": "{{testPackage}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"packageId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						}
					]
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "accessToken",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGSjg2R2NGM2pUYk5MT2NvNE52WmtVQ0lVbWZZQ3FvcXRPUWVNZmJoTmxFIn0.eyJqdGkiOiJiMzAwMzBmZS03MWJmLTQ2OTktYjM5OS0wNzZmYjJmNmI0NTYiLCJleHAiOjE1ODk5MTIyNTMsIm5iZiI6MCwiaWF0IjoxNTg3MzIwMjUzLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvc3RpZ21hbiIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI3ZGUzODg4Ny1mNmJmLTQ1OTctYWMyZC1iZjlmOWI2NjAyZDkiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJzdGlnLW1hbmFnZXIiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiIyZWY1MGUzZS1hNGI2LTQ4OTEtODY4Mi0zY2VhMTQzYzUwYTMiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbIioiXSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoicHJvZmlsZSBzdGlnLW1hbmFnZXIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJvZmZpY2VyLTYwIn0.ZGdJgFZopwpeECv9H5qFYG2mlOT672Yp9_iGIlxzFOsouhDUAo9s0Kx58qNsh8niyRMPLkt7zVJQFWlHN_lsP3wyH00Bpt8SxkbhIgpO1wLpiw9DeIsb8aMHYV4P4I9kZcyhZD_1Mw36sCrsRqZtrbi7BUITFDUSRSlR_X7jIY0",
						"type": "string"
					},
					{
						"key": "tokenType",
						"value": "bearer",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b4c16c70-e948-4d22-861a-54b2eb212920",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"user\", \"officer60\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a3277851-8c90-4255-b3f7-0711b957646a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "wf10",
			"item": [
				{
					"name": "Packages - Workforce 10 - no params",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b810e6b7-15de-43a3-95cb-5964f9d86735",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"//console.log(jsonData);",
									"pm.test(\"Your test name (fail)\", function () {",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});",
									"",
									"pm.test(\"environment: stig-manager localhost\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost\");",
									"});",
									"",
									"pm.test(\"collection: admin tests\", function () {",
									"    pm.expect(pm.collectionVariables.get(\"collection\")).to.equal(\"Admin Tests\");",
									"});",
									"",
									"console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an array\", function () {",
									"    pm.expect(jsonData).to.be.an( 'array' ); ",
									"});",
									"pm.test(\"Response JSON is an array THAT INCLUDES packageId prop\", function () {",
									"    jsonData.forEach( function (item) {",
									"    pm.expect(item).to.have.property('packageId'); ",
									"    });",
									"});",
									"",
									"pm.test(\"Response testJson is an array THAT INCLUDES\", function () {",
									"    testJson = [",
									"        {\"packageId\":21",
									"//        ,'other': 'ok'",
									"        },",
									"        {\"packageId\":22",
									" //        ,'other': 'not ok'            ",
									"        }",
									"        ]",
									"    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.includes({'packageId':21}); ",
									"//    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"//   pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"    ",
									"});",
									"",
									"",
									"console.log(jsonData);",
									"pm.test(\"Response has 3 objects (expected to fail)\", function () {",
									"    pm.expect(jsonData).to.have.length(4);",
									"",
									"});",
									"",
									"pm.test(\"response has 3 items\", function () {",
									"    pm.expect(jsonData).to.have.property('length',3);",
									"});",
									"",
									"pm.test(\"response items all have packageId\", function () {",
									"    pm.expect(jsonData).all.have.property('packageId');",
									"});",
									"",
									"pm.test(\"response items all have packageId\", function () {",
									"    pm.expect(jsonData).all.have.property('packageId');",
									"});",
									"",
									"pm.test(\"check for package id 21\", function () {",
									"    pm.expect(jsonData[0]).to.have.property('packageId',21);",
									"});",
									"",
									"pm.test(\"found package 21\", function () {",
									"    pm.expect(jsonData).to.deep.include({packageId:21});",
									"});",
									"",
									"pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"    pm.expect(jsonData).to.have.any.keys('packageId');",
									"});",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"pm.test(\"found packageId somewhere\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"packageId\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "accessToken",
									"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGSjg2R2NGM2pUYk5MT2NvNE52WmtVQ0lVbWZZQ3FvcXRPUWVNZmJoTmxFIn0.eyJqdGkiOiI1ZDhmMWNmNi1kZjdkLTQzNjQtOGQwZi0xZDkyYjcwZWNiMzEiLCJleHAiOjE1ODgxNzk5OTgsIm5iZiI6MCwiaWF0IjoxNTg1NTg3OTk4LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvc3RpZ21hbiIsInN1YiI6ImJmODdhMTZmLTM5ZTYtNDZkOS04OTcxLWYwZWY1MWRkM2Y4NSIsInR5cCI6IkJlYXJlciIsImF6cCI6InN0aWctbWFuYWdlciIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImVlNzA5MWYxLTVjMGYtNGVhZS04YWRlLTYzNWYzZmY2YjA5MiIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiYWRtaW4iLCJ1c2VyIl19LCJzY29wZSI6InByb2ZpbGUgc3RpZy1tYW5hZ2VyIiwibmFtZSI6IkFkbWluIEJ1cmtlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW4iLCJnaXZlbl9uYW1lIjoiQWRtaW4iLCJmYW1pbHlfbmFtZSI6IkJ1cmtlIn0.DmowfepH29bNP-zaH9-iRt6oC0Atvn74UKozWDm3gs_pHQvlc2DTzYYiDu6okaivsmtADpVkG11Bxz1wHwgmQ1wZO4qoVYTlx1VFzIlCf05o7uPjBr5GsjFEX19EsaUWGkMW5pRJbHLvajjN5P44GQgef5S3JiB5pSqwscwvi_w",
									"type": "string"
								},
								{
									"key": "tokenType",
									"value": "bearer",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							]
						}
					},
					"response": [
						{
							"name": "Packages - no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Apr 2020 02:52:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "Return a list of Packages accessible to the requester",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Tue, 14 Apr 2020 20:14:16 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n },\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n }\n]"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Packages wf10",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"packageId\": 22,\r\n  \"name\": \"okPackage\",\r\n  \"emassId\": \"emass1\",\r\n  \"pocName\": \"poc2\",\r\n  \"pocEmail\": \"pocEmail@email.com\",\r\n  \"pocPhone\": \"12342\",\r\n  \"reqRar\": true,\r\n  \"assetIds\": [\r\n    63\r\n  ]\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/packages?projection=assets&projection=stigs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								}
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"macCl\": \"<string>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n },\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"macCl\": \"<string>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n }\n]"
						}
					]
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "accessToken",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGSjg2R2NGM2pUYk5MT2NvNE52WmtVQ0lVbWZZQ3FvcXRPUWVNZmJoTmxFIn0.eyJqdGkiOiJhMGZhOTI4Mi1lYTI5LTQ5OTgtYTU5OS1lMTk4YTcxMjJkMTkiLCJleHAiOjE1ODk5Mzk2NjUsIm5iZiI6MCwiaWF0IjoxNTg3MzQ3NjY1LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvc3RpZ21hbiIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwMTgzZTAyMC0wMTRjLTRhYTMtODg3Yi01NDI3YzZiZGM1NDciLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJzdGlnLW1hbmFnZXIiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiJmNjhkNDc0Ny0zMWJiLTQ3YWEtYjMzZS0wYjQyNjczMTA3YmMiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbIioiXSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoicHJvZmlsZSBzdGlnLW1hbmFnZXIiLCJuYW1lIjoiQ1NXRiAxMCIsInByZWZlcnJlZF91c2VybmFtZSI6Indvcmtmb3JjZS0xMCIsImdpdmVuX25hbWUiOiJDU1dGIiwiZmFtaWx5X25hbWUiOiIxMCJ9.EA2s-UbeMFhnachtrsMEAYKWFL4DXnmm54Rcj39P9pTwIe9hqAcXYWFc2sSS3dy2DgI3QeTFGbJ545pYh2z6BcPFYHAK9PkkhOE1SWZOkutwcccJQ1Td5qUK8IcjGNfy7kB21RxGmhLqe-TDApl4GFx5p2DElAkPvLdWL3C4uX0",
						"type": "string"
					},
					{
						"key": "tokenType",
						"value": "bearer",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7c9670cd-bc96-4460-9720-a634e4edbe50",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"user\", \"wf10\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5973ab1c-f6de-4cb6-80ed-7adbfbac6656",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "officer10",
			"item": [],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "accessToken",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGSjg2R2NGM2pUYk5MT2NvNE52WmtVQ0lVbWZZQ3FvcXRPUWVNZmJoTmxFIn0.eyJqdGkiOiJiN2JkNDU4Yi1jZWNiLTQ5NWYtODIyNC0yMTRiNWM3ZWQzYzUiLCJleHAiOjE1OTA0MzI4MjAsIm5iZiI6MCwiaWF0IjoxNTg3ODQwODIwLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvc3RpZ21hbiIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJlMDkwZmIzYi0zNGQwLTQ0YzctOWQ5MS04MDg4YmY2NGM4MGQiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJzdGlnLW1hbmFnZXIiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiI0OWVjZGM0OC05N2ZkLTRlNjctODdhYi02OGJkYzlhNThkZWYiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbIioiXSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoicHJvZmlsZSBzdGlnLW1hbmFnZXIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJvZmZpY2VyLTEwIn0.dtHPjRD0PykYBNAH913Vr4omhhw01rfQWhyeLJsmgGANvvbACZ8XpL2MFx7qPJ9-tRyZbMlqX8FCMwPllizS7J02lpIcDufr5HJx_v4CK6eUHYcxfTuKrLBjUDQ8wRvz0oBUB8ZwB86BfhkcFFCN9uOODGgVahaZgGm3wDBsmuc",
						"type": "string"
					},
					{
						"key": "tokenType",
						"value": "bearer",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cf19c4c9-0c1f-4c61-ae7d-87878e661290",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"user\", \"officer10\");"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "711b6662-f272-49bf-b688-145566083669",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ALL",
			"item": [
				{
					"name": "Packages - Admin- with Projections Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3513dadc-9fc7-48cc-a656-17b959d80d80",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var user = pm.environment.get(\"user\");",
									"if (pm.request.url.getQueryString().match(/elevate=true/)){",
									"    user = \"elevated\";",
									"}",
									"// console.log(\"url: \" + pm.request.url.getQueryString().match(/elevate=true/));",
									"console.log(\"user: \" + user);",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request.url.query;",
									"console.log(\"stuff:\" + stuff);",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"let allowedPackages, disallowedPackages, validStigs, invalidStigs, validAssets, invalidAssets;",
									"console.log (\"assignments\")",
									"allowedPackages = JSON.parse(pm.environment.get((\"packages.valid.\" + user)));",
									"disallowedPackages = JSON.parse(pm.environment.get(\"packages.invalid.\" + user));",
									"validStigs = JSON.parse(pm.environment.get(\"stigs.valid.\" + user));",
									"invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid.\" + user));     ",
									"validAssets = JSON.parse(pm.environment.get(\"assets.valid.\" + user));",
									"invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid.\" + user));       ",
									"console.log(\"user is \" + user);",
									"",
									"",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an array\", function () {",
									"    pm.expect(jsonData).to.be.an( 'array' ); ",
									"});",
									"",
									"let packageIds = [];",
									"let assetIds = [];",
									"let stigIds = [];",
									"pm.test(\"Each item in response has proper properties\", function () {",
									"        jsonData.forEach( function (item) {",
									"            pm.expect(item).to.have.property('packageId'); ",
									"            packageIds.push(item.packageId);",
									"            // console.log (item.assets);",
									"            // let assets = [];",
									"            // assets = item.assets;",
									"            // console.log (assets);",
									"            item.assets.forEach( function (asset) {",
									"                pm.expect(asset).to.have.property('assetId');",
									"                assetIds.push(asset.assetId);",
									"            });",
									"            ",
									"            item.stigs.forEach( function (stig) {",
									"                pm.expect(stig).to.have.property('benchmarkId'); ",
									"                stigIds.push(stig.benchmarkId);",
									"            });",
									"        ",
									"        });",
									"        ",
									"//     pm.expect(packageIds).to.include.members(allowedPackages);",
									"});",
									"",
									"console.log(\"packageIds = \" + packageIds);",
									"",
									"pm.test(\"Response contains VALID packageIds for this user\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.be.oneOf(allowedPackages); ",
									"    });",
									"});",
									"",
									"pm.test(\"Response does NOT contain INvalid packageIds for this user\", function () {",
									"    jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(item.packageId).to.not.be.oneOf(disallowedPackages); ",
									"    });",
									"});",
									"",
									"// pm.test(\"Every user should fail this test (pacakgeId does not exist in system)\", function () {",
									"//     jsonData.forEach( function (item) {",
									"//     // console.log(\"checking packageId: \" + item.packageId);",
									"//     pm.expect(item.packageId).to.be.oneOf(JSON.parse(pm.environment.get(\"packageThatDoesNotExist\"))); ",
									"//     });",
									"// });",
									"",
									"",
									"if (user == \"wf60\" || user == \"officer60\"){",
									"    pm.test(\"Response contains valid projection data (assets)\", function () {",
									"        assetIds.forEach( function (assetId) {",
									"                pm.expect(assetId).to.be.oneOf(validAssets); ",
									"                console.log(\"checking assetId: \" + assetId);",
									"        });",
									"    });",
									"    ",
									"    pm.test(\"Response contains valid projection data (stigs)\", function () {",
									"            stigIds.forEach( function (stigId) {",
									"                pm.expect(stigId).to.be.oneOf(validStigs); ",
									"                console.log(\"checking stigId: \" + stigId);",
									"        });",
									"    });",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"// pm.test(\"Response testJson is an array THAT INCLUDES\", function () {",
									"//     testJson = [",
									"//         {\"packageId\":21",
									"// //        ,'other': 'ok'",
									"//         },",
									"//         {\"packageId\":22",
									"//  //        ,'other': 'not ok'            ",
									"//         }",
									"//         ]",
									"//     pm.expect(testJson).to.be.an( 'array' ).that.has.deep.includes({'packageId':21}); ",
									"// //    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"// //   pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"    ",
									"// });",
									"",
									"",
									"// console.log(jsonData);",
									"// pm.test(\"Response has 3 objects (expected to fail)\", function () {",
									"//     pm.expect(jsonData).to.have.length(4);",
									"",
									"// });",
									"",
									"// pm.test(\"response has 3 items\", function () {",
									"//     pm.expect(jsonData).to.have.property('length',allowedPackages.length);",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.property('packageId');",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.key('packageId');",
									"// });",
									"",
									"// pm.test(\"check for package id 21\", function () {",
									"//     pm.expect(jsonData[0]).to.have.property('packageId',21);",
									"// });",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "717bdd09-0047-4151-afe2-d6a0995d994f",
								"exec": [
									"// pm.environment.set(\"user\", \"admin\");",
									"// var user = pm.environment.get(\"user\");",
									"// let token = pm.environment.get(\"token.\" + user)",
									"// pm.environment.set(\"token\", token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages?projection=assets&projection=stigs&elevate={{elevated}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								},
								{
									"key": "elevate",
									"value": "{{elevated}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n },\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n }\n]"
						},
						{
							"name": "Packages - no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Wed, 15 Apr 2020 02:52:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Packages - Admin- no params",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Cache-control",
									"value": "no-store"
								},
								{
									"key": "Date",
									"value": "Tue, 28 Apr 2020 20:27:24 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						},
						{
							"name": "Return a list of Packages accessible to the requester",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>",
											"description": "Elevate the user context for this request if user is permitted (canAdmin)"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										},
										{
											"key": "projection",
											"value": "<string>",
											"description": "Additional properties to include in the response.\n"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Date",
									"value": "Tue, 14 Apr 2020 20:14:16 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
						}
					]
				},
				{
					"name": "packages/{packageId} admin Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d6d7d084-1814-4ed4-aa65-1d8b19777bc8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var user = pm.environment.get(\"user\");",
									"console.log(\"user: \" + user);",
									"user = pm.environment.get(\"user\");",
									"if (pm.request.url.getQueryString().match(/elevate=true/)){",
									"    user = \"elevated\";",
									"}",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request;",
									"console.log(stuff);",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an object\", function () {",
									"    pm.expect(jsonData).to.be.an( 'object' ); ",
									"});",
									"",
									"let testPackage = JSON.parse(pm.environment.get((\"testPackage\")));",
									"pm.test(\"Response JSON is an object with packageId\", function () {",
									"    pm.expect(jsonData).to.have.deep.property('packageId',testPackage); ",
									"});",
									"",
									"let allowedPackages, disallowedPackages, validStigs, invalidStigs, validAssets, invalidAssets;",
									"console.log (\"user is \" + user);",
									"allowedPackages = JSON.parse(pm.environment.get((\"packages.valid.\" + user)));",
									"disallowedPackages = JSON.parse(pm.environment.get(\"packages.invalid.\" + user));",
									"validStigs = JSON.parse(pm.environment.get(\"stigs.valid.\" + user));",
									"invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid.\" + user));     ",
									"validAssets = JSON.parse(pm.environment.get(\"assets.valid.\" + user));",
									"invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid.\" + user));       ",
									"console.log(\"user is \" + user);",
									"",
									"let packageIds = [];",
									"let assetIds = [];",
									"let stigIds = [];",
									"pm.test(\"Each item in response has packageId\", function () {",
									"    pm.expect(jsonData).to.have.property('packageId'); ",
									"    packageIds.push(jsonData.packageId);",
									"    jsonData.assets.forEach( function (asset) {",
									"        pm.expect(asset).to.have.property('assetId'); ",
									"        assetIds.push(asset.assetId);",
									"    });",
									"    jsonData.stigs.forEach( function (stig) {",
									"        pm.expect(stig).to.have.property('benchmarkId'); ",
									"        stigIds.push(stig.benchmarkId);",
									"    });",
									"    // pm.expect(packageIds).to.include.oneOf(allowedPackages);",
									"});",
									"",
									"console.log(\"packageIds = \" + packageIds);",
									"",
									"pm.test(\"Response contains VALID packageIds for this user\", function () {",
									"    // jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(jsonData.packageId).to.be.oneOf(allowedPackages); ",
									"    // });",
									"});",
									"",
									"pm.test(\"Response does NOT contain INvalid packageIds for this user\", function () {",
									"    // jsonData.forEach( function (item) {",
									"    // console.log(\"checking packageId: \" + item.packageId);",
									"    pm.expect(jsonData.packageId).to.not.be.oneOf(disallowedPackages); ",
									"    // });",
									"});",
									"",
									"// pm.test(\"Every user should fail this test (pacakgeId does not exist in system)\", function () {",
									"//     jsonData.forEach( function (item) {",
									"//     // console.log(\"checking packageId: \" + item.packageId);",
									"//     pm.expect(item.packageId).to.be.oneOf(JSON.parse(pm.environment.get(\"packageThatDoesNotExist\"))); ",
									"//     });",
									"// });",
									"",
									"",
									"if (user == \"wf60\" || user == \"officer60\"){",
									"    pm.test(\"Response contains valid projection data (assets)\", function () {",
									"        assetIds.forEach( function (assetId) {",
									"                pm.expect(assetId).to.be.oneOf(validAssets); ",
									"                console.log(\"checking assetId: \" + assetId);",
									"        });",
									"    });",
									"    ",
									"    pm.test(\"Response contains valid projection data (stigs)\", function () {",
									"            stigIds.forEach( function (stigId) {",
									"                pm.expect(stigId).to.be.oneOf(validStigs); ",
									"                console.log(\"checking stigId: \" + stigId);",
									"        });",
									"    });",
									"}",
									"",
									"if (user == \"wf60\" || user == \"officer60\"){",
									"    pm.test(\"checking package assets returned\", function () {",
									"        jsonData.assets.forEach( function (item) {",
									"        console.log(\"checking assetId: \" + item.assetId);",
									"        pm.expect(item.assetId).to.be.oneOf(validAssets); ",
									"        });",
									"        // pm.expect(jsonData.assets).to.deep.include({packageId:21});",
									"    });",
									"    ",
									"}",
									"",
									"",
									"",
									"// pm.test(\"Response testJson is an array THAT INCLUDES\", function () {",
									"//     testJson = [",
									"//         {\"packageId\":21",
									"// //        ,'other': 'ok'",
									"//         },",
									"//         {\"packageId\":22",
									"//  //        ,'other': 'not ok'            ",
									"//         }",
									"//         ]",
									"//     pm.expect(testJson).to.be.an( 'array' ).that.has.deep.includes({'packageId':21}); ",
									"// //    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"// //   pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
									"    ",
									"// });",
									"",
									"",
									"// console.log(jsonData);",
									"// pm.test(\"Response has 3 objects (expected to fail)\", function () {",
									"//     pm.expect(jsonData).to.have.length(4);",
									"",
									"// });",
									"",
									"// pm.test(\"response has 3 items\", function () {",
									"//     pm.expect(jsonData).to.have.property('length',allowedPackages.length);",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.property('packageId');",
									"// });",
									"",
									"// pm.test(\"response items all have packageId\", function () {",
									"//     pm.expect(jsonData).all.have.key('packageId');",
									"// });",
									"",
									"// pm.test(\"check for package id 21\", function () {",
									"//     pm.expect(jsonData[0]).to.have.property('packageId',21);",
									"// });",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages/:packageId?projection=assets&projection=stigs&elevate=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								":packageId"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								},
								{
									"key": "elevate",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "packageId",
									"value": "{{testPackage}}",
									"type": "string",
									"description": "(Required) A path parameter that indentifies a Package"
								}
							]
						}
					},
					"response": [
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"packageId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?elevate=<boolean>&projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "elevate",
											"value": "<boolean>"
										},
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Packages admin Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52617c70-8495-49fa-b932-fa7fbe1ab991",
								"exec": [
									"var user = pm.environment.get(\"user\");",
									"console.log(\"user: \" + user);",
									"user = pm.environment.get(\"user\");",
									"if (pm.request.url.getQueryString().match(/elevate=true/)){",
									"    user = \"elevated\";",
									"    console.log(\"user is elevated\");",
									"",
									"}",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request;",
									"console.log(stuff);",
									"",
									"if (user == 'elevated' || user == 'staff'){",
									"    pm.test(\"User is elevated. Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}",
									"else {",
									"    pm.test(\"User is not Staff or elevated. Expected status code is 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"    return;",
									"}",
									"",
									"if (pm.response.code == 500){",
									"    console.log(\"Server returned 500\")",
									"    return;",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response JSON is an object\", function () {",
									"    pm.expect(jsonData).to.be.an( 'object' ); ",
									"});",
									"",
									"let createdPackage = jsonData.packageId;",
									"console.log(\"created package: \" + createdPackage)",
									"pm.environment.set (\"createdPackage\",createdPackage);",
									"",
									"pm.test(`Created Package: ${createdPackage}`, function () {",
									"    pm.expect(createdPackage).to.be.an('number');",
									"});",
									"",
									"// postman.setNextRequest(\"Package delete admin\");",
									"",
									"",
									"",
									"// let allowedPackages, disallowedPackages, validStigs, invalidStigs, validAssets, invalidAssets;",
									"// console.log (\"user is \" + user);",
									"// allowedPackages = JSON.parse(pm.environment.get((\"packages.valid.\" + user)));",
									"// disallowedPackages = JSON.parse(pm.environment.get(\"packages.invalid.\" + user));",
									"// validStigs = JSON.parse(pm.environment.get(\"stigs.valid.\" + user));",
									"// invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid.\" + user));     ",
									"// validAssets = JSON.parse(pm.environment.get(\"assets.valid.\" + user));",
									"// invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid.\" + user));       ",
									"// console.log(\"user is \" + user);",
									"",
									"",
									"",
									"// if (user == 'wf60'){",
									"//     pm.test(\"wf60 - checking package assets returned\", function () {",
									"//         jsonData.assets.forEach( function (item) {",
									"//         console.log(\"checking assetId: \" + item.assetId);",
									"//         pm.expect(item.assetId).to.be.oneOf(allowedAssets); ",
									"//         });",
									"//         // pm.expect(jsonData.assets).to.deep.include({packageId:21});",
									"//     });",
									"    ",
									"// }",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test Package 1\",\r\n  \"emassId\": \"emass1\",\r\n  \"pocName\": \"poc2\",\r\n  \"pocEmail\": \"pocEmail@email.com\",\r\n  \"pocPhone\": \"12342\",\r\n  \"reqRar\": true,\r\n  \"assetIds\": [\r\n    64\r\n  ]\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/packages?projection=assets&projection=stigs&elevate=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets"
								},
								{
									"key": "projection",
									"value": "stigs"
								},
								{
									"key": "elevate",
									"value": "true"
								}
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"macCl\": \"<string>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n },\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"macCl\": \"<string>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n }\n]"
						}
					]
				},
				{
					"name": "packages/{packageId} admin Copy",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"testPackagePatched\",\r\n  \"pocName\": \"pocPatched\",\r\n  \"pocEmail\": \"emailPatched\",\r\n  \"pocPhone\": \"phonePatched\",\r\n  \"reqRar\": false,\r\n  \"assetIds\": [\r\n    36\r\n  ]\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/packages/:packageId?projection=assets&projection=stigs&elevate=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								":packageId"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "elevate",
									"value": "true"
								}
							],
							"variable": [
								{
									"description": "(Required) A path parameter that indentifies a Package",
									"key": "packageId",
									"type": "string",
									"value": "{{createdPackage}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"packageId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "packages/{packageId} admin Copy",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"testPackagePUT\",\r\n  \"emassId\": \"emassPUT\",\r\n  \"pocName\": \"pocPUT\",\r\n  \"pocEmail\": \"pocEmailPUT\",\r\n  \"pocPhone\": \"pocPhonePUT\",\r\n  \"reqRar\": true,\r\n  \"assetIds\": [\r\n    36\r\n  ]\r\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/packages/:packageId?projection=assets&projection=stigs&elevate=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								":packageId"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "elevate",
									"value": "true"
								}
							],
							"variable": [
								{
									"description": "(Required) A path parameter that indentifies a Package",
									"key": "packageId",
									"type": "string",
									"value": "{{createdPackage}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"packageId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"emassId\": \"<string>\",\n    \"pocName\": \"<string>\",\n    \"pocEmail\": \"<string>\",\n    \"pocPhone\": \"<string>\",\n    \"reqRar\": \"<boolean>\",\n    \"macCl\": \"<string>\",\n    \"assetIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"packageId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "Package delete admin Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06f6e027-9913-4daa-9d0b-3dc6fd2a0f80",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var user = pm.environment.get(\"user\");",
									"console.log(\"user: \" + user);",
									"user = pm.environment.get(\"user\");",
									"if (pm.request.url.getQueryString().match(/elevate=true/)){",
									"    user = \"elevated\";",
									"}",
									"",
									"var stuff = pm.request.auth;",
									"console.log(stuff);",
									"var stuff = pm.request;",
									"console.log(stuff);",
									"",
									"",
									"if (user != \"elevated\"){",
									"    pm.test(\"Status code should be 403\", function () {",
									"        pm.response.to.have.status(403);",
									"    });",
									"    console.log(`Status code: ${pm.response.code}. Either previous test did not create the package, the package has already been deleted, or this user is not authorized to delete this package.`);",
									"    return;",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"//console.log(jsonData);",
									"// pm.test(\"Your test name (fail)\", function () {",
									"//     pm.expect(jsonData.value).to.eql(100);",
									"// });",
									"",
									"pm.test(\"environment: stig-manager localhost packages\", function () {",
									"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost packages\");",
									"});",
									"",
									"",
									"console.log(jsonData);",
									"// console.log(pm.environment.get(\"env\"));",
									"",
									"pm.test(\"Response is an array with one JSON object\", function () {",
									"    pm.expect(jsonData[0]).to.be.an( 'object' ); ",
									"});",
									"",
									"// let createdPackage = jsonData.packageId;",
									"// console.log(\"created package: \" + createdPackage)",
									"// pm.environment.set (\"createdPackage\",createdPackage);",
									"",
									"",
									"// let allowedPackages, disallowedPackages, validStigs, invalidStigs, validAssets, invalidAssets;",
									"// console.log (\"user is \" + user);",
									"// allowedPackages = JSON.parse(pm.environment.get((\"packages.valid.\" + user)));",
									"// disallowedPackages = JSON.parse(pm.environment.get(\"packages.invalid.\" + user));",
									"// validStigs = JSON.parse(pm.environment.get(\"stigs.valid.\" + user));",
									"// invalidStigs = JSON.parse(pm.environment.get(\"stigs.invalid.\" + user));     ",
									"// validAssets = JSON.parse(pm.environment.get(\"assets.valid.\" + user));",
									"// invalidAssets = JSON.parse(pm.environment.get(\"assets.invalid.\" + user));       ",
									"// console.log(\"user is \" + user);",
									"",
									"",
									"",
									"// if (user == 'wf60'){",
									"//     pm.test(\"wf60 - checking package assets returned\", function () {",
									"//         jsonData.assets.forEach( function (item) {",
									"//         console.log(\"checking assetId: \" + item.assetId);",
									"//         pm.expect(item.assetId).to.be.oneOf(allowedAssets); ",
									"//         });",
									"//         // pm.expect(jsonData.assets).to.deep.include({packageId:21});",
									"//     });",
									"    ",
									"// }",
									"",
									"",
									"",
									"",
									"",
									"// pm.test(\"found package 21\", function () {",
									"//     pm.expect(jsonData).to.deep.include({packageId:21});",
									"// });",
									"",
									"// pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
									"//     pm.expect(jsonData).to.have.any.keys('packageId');",
									"// });",
									"",
									"",
									"//pm.test(\"Body is correct\", function () {",
									"    //pm.response.to.have.body(\"response_body_string\");",
									"//});",
									"",
									"// pm.test(\"found packageId somewhere\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"packageId\");",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages/:packageId?projection=assets&projection=stigs&elevate=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								":packageId"
							],
							"query": [
								{
									"key": "projection",
									"value": "assets",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "stigs",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "elevate",
									"value": "true"
								}
							],
							"variable": [
								{
									"description": "(Required) A path parameter that indentifies a Package",
									"key": "packageId",
									"type": "string",
									"value": "{{createdPackage}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "PackageProjected response",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/packages/:packageId?projection=<string>&projection=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"packages",
										":packageId"
									],
									"query": [
										{
											"key": "projection",
											"value": "<string>"
										},
										{
											"key": "projection",
											"value": "<string>"
										}
									],
									"variable": [
										{
											"key": "packageId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"packageId\": \"<integer>\",\n \"name\": \"<string>\",\n \"emassId\": \"<string>\",\n \"pocName\": \"<string>\",\n \"pocEmail\": \"<string>\",\n \"pocPhone\": \"<string>\",\n \"reqRar\": \"<boolean>\",\n \"macCl\": \"<string>\",\n \"assets\": [\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  },\n  {\n   \"assetId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"dept\": \"<string>\"\n  }\n ],\n \"stigs\": [\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  },\n  {\n   \"benchmarkId\": \"<string>\",\n   \"title\": \"<string>\",\n   \"lastRevisionStr\": \"<string>\",\n   \"lastRevisionDate\": \"<string>\"\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "packages/packageId/checklist Admin Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages/{{testPackage}}/checklists/{{testBenchmark}}/latest",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages",
								"{{testPackage}}",
								"checklists",
								"{{testBenchmark}}",
								"latest"
							]
						},
						"description": "Returns checklist for specified package/benchmark/rev"
					},
					"response": []
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "accessToken",
						"value": "{{token}}",
						"type": "string"
					},
					{
						"key": "tokenType",
						"value": "bearer",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0bc2587d-3ef3-4b09-b355-3e8f334b1389",
						"type": "text/javascript",
						"exec": [
							"// pm.environment.set(\"curUser\", \"staff\");",
							"",
							"user = pm.iterationData.get(\"user\");",
							"console.log(`user: ${user} `);",
							"",
							"",
							"if (user == \"admin\"){",
							"    pm.environment.set(\"elevated\", \"true\");",
							"    console.log(\"setting elevated to true. \");",
							"}",
							"else {",
							"    pm.environment.set(\"elevated\", \"false\");",
							"    pm.environment.set(\"user\", \"wf60\");",
							"    user = \"wf60\";",
							"    console.log(\"setting elevated to false, user to staff \");",
							"",
							"}",
							"",
							"let token = pm.environment.get(\"token.\" + user)",
							"pm.environment.set(\"token\", token);",
							"console.log(\"Bearer: \" + token);",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2a72c5f1-5de4-4330-a823-cf3539088802",
						"type": "text/javascript",
						"exec": [
							"// var user = pm.environment.get(\"user\");",
							"// var elevated = pm.environment.get(\"elevated\");",
							"",
							"// pm.test(`Packages Tests with user: ${user} elevated: ${elevated} `, function () {",
							"//     pm.expect(pm.environment.get(\"user\")).to.equal(user);",
							"// });"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Packages - Admin- no params SAMPLE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b810e6b7-15de-43a3-95cb-5964f9d86735",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"//console.log(jsonData);",
							"pm.test(\"Your test name (fail)\", function () {",
							"    pm.expect(jsonData.value).to.eql(100);",
							"});",
							"",
							"pm.test(\"environment: stig-manager localhost\", function () {",
							"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost\");",
							"});",
							"",
							"pm.test(\"collection: admin tests\", function () {",
							"    pm.expect(pm.collectionVariables.get(\"collection\")).to.equal(\"Admin Tests\");",
							"});",
							"",
							"console.log(pm.environment.get(\"env\"));",
							"",
							"pm.test(\"Response JSON is an array\", function () {",
							"    pm.expect(jsonData).to.be.an( 'array' ); ",
							"});",
							"pm.test(\"Response JSON is an array THAT INCLUDES packageId prop\", function () {",
							"    jsonData.forEach( function (item) {",
							"    pm.expect(item).to.have.property('packageId'); ",
							"    });",
							"});",
							"",
							"pm.test(\"Response testJson is an array THAT INCLUDES\", function () {",
							"    testJson = [",
							"        {\"packageId\":21",
							"//        ,'other': 'ok'",
							"        },",
							"        {\"packageId\":22",
							" //        ,'other': 'not ok'            ",
							"        }",
							"        ]",
							"    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.includes({'packageId':21}); ",
							"//    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
							"//   pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
							"    ",
							"});",
							"",
							"",
							"console.log(jsonData);",
							"pm.test(\"Response has 3 objects (expected to fail)\", function () {",
							"    pm.expect(jsonData).to.have.length(4);",
							"",
							"});",
							"",
							"pm.test(\"response has 3 items\", function () {",
							"    pm.expect(jsonData).to.have.property('length',3);",
							"});",
							"",
							"pm.test(\"response items all have packageId\", function () {",
							"    pm.expect(jsonData).all.have.property('packageId');",
							"});",
							"",
							"pm.test(\"response items all have packageId\", function () {",
							"    pm.expect(jsonData).all.have.property('packageId');",
							"});",
							"",
							"pm.test(\"check for package id 21\", function () {",
							"    pm.expect(jsonData[0]).to.have.property('packageId',21);",
							"});",
							"",
							"pm.test(\"found package 21\", function () {",
							"    pm.expect(jsonData).to.deep.include({packageId:21});",
							"});",
							"",
							"pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
							"    pm.expect(jsonData).to.have.any.keys('packageId');",
							"});",
							"",
							"",
							"//pm.test(\"Body is correct\", function () {",
							"    //pm.response.to.have.body(\"response_body_string\");",
							"//});",
							"",
							"pm.test(\"found packageId somewhere\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"packageId\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGSjg2R2NGM2pUYk5MT2NvNE52WmtVQ0lVbWZZQ3FvcXRPUWVNZmJoTmxFIn0.eyJqdGkiOiI1ZDhmMWNmNi1kZjdkLTQzNjQtOGQwZi0xZDkyYjcwZWNiMzEiLCJleHAiOjE1ODgxNzk5OTgsIm5iZiI6MCwiaWF0IjoxNTg1NTg3OTk4LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvc3RpZ21hbiIsInN1YiI6ImJmODdhMTZmLTM5ZTYtNDZkOS04OTcxLWYwZWY1MWRkM2Y4NSIsInR5cCI6IkJlYXJlciIsImF6cCI6InN0aWctbWFuYWdlciIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6ImVlNzA5MWYxLTVjMGYtNGVhZS04YWRlLTYzNWYzZmY2YjA5MiIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiKiJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsiYWRtaW4iLCJ1c2VyIl19LCJzY29wZSI6InByb2ZpbGUgc3RpZy1tYW5hZ2VyIiwibmFtZSI6IkFkbWluIEJ1cmtlIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYWRtaW4iLCJnaXZlbl9uYW1lIjoiQWRtaW4iLCJmYW1pbHlfbmFtZSI6IkJ1cmtlIn0.DmowfepH29bNP-zaH9-iRt6oC0Atvn74UKozWDm3gs_pHQvlc2DTzYYiDu6okaivsmtADpVkG11Bxz1wHwgmQ1wZO4qoVYTlx1VFzIlCf05o7uPjBr5GsjFEX19EsaUWGkMW5pRJbHLvajjN5P44GQgef5S3JiB5pSqwscwvi_w",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/packages",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"packages"
					]
				}
			},
			"response": [
				{
					"name": "Packages - no params",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Date",
							"value": "Wed, 15 Apr 2020 02:52:21 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
				},
				{
					"name": "unexpected error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							],
							"query": [
								{
									"key": "elevate",
									"value": "<boolean>"
								},
								{
									"key": "projection",
									"value": "<string>"
								},
								{
									"key": "projection",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
				},
				{
					"name": "PackageProjected response",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							],
							"query": [
								{
									"key": "elevate",
									"value": "<boolean>"
								},
								{
									"key": "projection",
									"value": "<string>"
								},
								{
									"key": "projection",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n },\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n }\n]"
				},
				{
					"name": "Return a list of Packages accessible to the requester",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							],
							"query": [
								{
									"key": "elevate",
									"value": "<boolean>",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)"
								},
								{
									"key": "projection",
									"value": "<string>",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "<string>",
									"description": "Additional properties to include in the response.\n"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Date",
							"value": "Tue, 14 Apr 2020 20:14:16 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
				}
			]
		},
		{
			"name": "Packages - Workforce 60 samples",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b810e6b7-15de-43a3-95cb-5964f9d86735",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"var testArray= [1,2,3,42];",
							"pm.environment.set(\"testArray\", testArray);",
							"pm.environment.set(\"testArray2\", JSON.stringify(testArray));",
							"",
							"//console.log(jsonData);",
							"pm.test(\"Your test name (fail)\", function () {",
							"    pm.expect(jsonData.value).to.eql(100);",
							"});",
							"",
							"pm.test(\"environment: stig-manager localhost\", function () {",
							"    pm.expect(pm.environment.get(\"env\")).to.equal(\"stig-manager localhost\");",
							"});",
							"",
							"pm.test(\"collection: admin tests\", function () {",
							"    pm.expect(pm.collectionVariables.get(\"collection\")).to.equal(\"Admin Tests\");",
							"});",
							"",
							"console.log(pm.environment.get(\"env\"));",
							"",
							"pm.test(\"Response JSON is an array\", function () {",
							"    pm.expect(jsonData).to.be.an( 'array' ); ",
							"});",
							"pm.test(\"Response JSON is an array THAT INCLUDES packageId prop\", function () {",
							"    jsonData.forEach( function (item) {",
							"    pm.expect(item).to.have.property('packageId'); ",
							"    });",
							"});",
							"",
							"pm.test(\"Response testJson is an array THAT INCLUDES\", function () {",
							"    testJson = [",
							"        {\"packageId\":21",
							"//        ,'other': 'ok'",
							"        },",
							"        {\"packageId\":22",
							" //        ,'other': 'not ok'            ",
							"        }",
							"        ]",
							"    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.includes({'packageId':21}); ",
							"//    pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
							"//   pm.expect(testJson).to.be.an( 'array' ).that.has.deep.property('packageId'); ",
							"    ",
							"});",
							"",
							"",
							"console.log(jsonData);",
							"pm.test(\"Response has 3 objects (expected to fail)\", function () {",
							"    pm.expect(jsonData).to.have.length(4);",
							"",
							"});",
							"",
							"pm.test(\"response has 3 items\", function () {",
							"    pm.expect(jsonData).to.have.property('length',3);",
							"});",
							"",
							"pm.test(\"response items all have packageId\", function () {",
							"    pm.expect(jsonData).all.have.property('packageId');",
							"});",
							"",
							"pm.test(\"response items all have packageId\", function () {",
							"    pm.expect(jsonData).all.have.property('packageId');",
							"});",
							"",
							"pm.test(\"check for package id 21\", function () {",
							"    pm.expect(jsonData[0]).to.have.property('packageId',21);",
							"});",
							"",
							"pm.test(\"found package 21\", function () {",
							"    pm.expect(jsonData).to.deep.include({packageId:21});",
							"});",
							"",
							"pm.test(\"found package 21 (or just package ids somewhere)\", function () {",
							"    pm.expect(jsonData).to.have.any.keys('packageId');",
							"});",
							"",
							"",
							"//pm.test(\"Body is correct\", function () {",
							"    //pm.response.to.have.body(\"response_body_string\");",
							"//});",
							"",
							"pm.test(\"found packageId somewhere\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"packageId\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGSjg2R2NGM2pUYk5MT2NvNE52WmtVQ0lVbWZZQ3FvcXRPUWVNZmJoTmxFIn0.eyJqdGkiOiI3ODhkNjQ5NS0zNGRmLTQ2YjctOGRjOC01MmQ0Mzk3NzkyYWEiLCJleHAiOjE1ODgxNzk5NTIsIm5iZiI6MCwiaWF0IjoxNTg1NTg3OTUyLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvc3RpZ21hbiIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwMWMzMDdmMS05YTNkLTQzMmYtYjMwZi1mZjhiOTIzNzI2MGQiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJzdGlnLW1hbmFnZXIiLCJhdXRoX3RpbWUiOjAsInNlc3Npb25fc3RhdGUiOiJkYjJiM2RiYy04YWIzLTQyNDEtOTlmZC1iNGU5YTI4YWNkZmUiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbIioiXSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoicHJvZmlsZSBzdGlnLW1hbmFnZXIiLCJuYW1lIjoiQ1NXRiA2MCIsInByZWZlcnJlZF91c2VybmFtZSI6Indvcmtmb3JjZS02MCIsImdpdmVuX25hbWUiOiJDU1dGIiwiZmFtaWx5X25hbWUiOiI2MCJ9.XowE9bXz8ySPfq8HvG8Pu9XzSfdrWpgj_ecKQUeataUY5quMDHsTbEehfj7i2YwT9arg4e-WJlhGvQxftyea7Rz9Mo7loGbGd1VRaJyELCC0oGEzCwDXRQIX4ZUK08JL0EKwAh7dKUMSWLbZyeV1IuIXI1-pYE_M0LAvP3uT7v4",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/packages",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"packages"
					]
				}
			},
			"response": [
				{
					"name": "PackageProjected response",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							],
							"query": [
								{
									"key": "elevate",
									"value": "<boolean>"
								},
								{
									"key": "projection",
									"value": "<string>"
								},
								{
									"key": "projection",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n },\n {\n  \"packageId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"emassId\": \"<string>\",\n  \"pocName\": \"<string>\",\n  \"pocEmail\": \"<string>\",\n  \"pocPhone\": \"<string>\",\n  \"reqRar\": \"<boolean>\",\n  \"assets\": [\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   },\n   {\n    \"assetId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"dept\": \"<string>\"\n   }\n  ],\n  \"stigs\": [\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   },\n   {\n    \"benchmarkId\": \"<string>\",\n    \"title\": \"<string>\",\n    \"lastRevisionStr\": \"<string>\",\n    \"lastRevisionDate\": \"<string>\"\n   }\n  ]\n }\n]"
				},
				{
					"name": "unexpected error",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							],
							"query": [
								{
									"key": "elevate",
									"value": "<boolean>"
								},
								{
									"key": "projection",
									"value": "<string>"
								},
								{
									"key": "projection",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"code\": \"<integer>\",\n \"message\": \"<string>\"\n}"
				},
				{
					"name": "Packages - no params",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Date",
							"value": "Wed, 15 Apr 2020 02:52:21 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
				},
				{
					"name": "Return a list of Packages accessible to the requester",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/packages?elevate=<boolean>&projection=<string>&projection=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"packages"
							],
							"query": [
								{
									"key": "elevate",
									"value": "<boolean>",
									"description": "Elevate the user context for this request if user is permitted (canAdmin)"
								},
								{
									"key": "projection",
									"value": "<string>",
									"description": "Additional properties to include in the response.\n"
								},
								{
									"key": "projection",
									"value": "<string>",
									"description": "Additional properties to include in the response.\n"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Date",
							"value": "Tue, 14 Apr 2020 20:14:16 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"packageId\": 21,\n        \"name\": \"Code 60 Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"W. E. Coyote\",\n        \"pocEmail\": \"coyote@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 1,\n        \"name\": \"STAR Package\",\n        \"emassId\": \"none\",\n        \"pocName\": \"Bob\",\n        \"pocEmail\": \"bob@navy.mil\",\n        \"pocPhone\": \"555-1212\",\n        \"reqRar\": false\n    },\n    {\n        \"packageId\": 62,\n        \"name\": \"Twine\",\n        \"emassId\": null,\n        \"pocName\": null,\n        \"pocEmail\": null,\n        \"pocPhone\": null,\n        \"reqRar\": false\n    }\n]"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "2eeb98fb-d2b2-4d4a-b995-4b57f234cf1a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "fb2305cf-39b3-4637-a8d3-02f459f31a09",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}