diff --git a/node_modules/oas-tools/src/index.js b/node_modules/oas-tools/src/index.js
index e413588..1798406 100644
--- a/node_modules/oas-tools/src/index.js
+++ b/node_modules/oas-tools/src/index.js
@@ -358,23 +358,23 @@ function registerPaths(specDoc, app) {
       }
     }
   }
-  if (config.docs && config.docs.apiDocs) {
-    if (!config.docs.apiDocsPrefix) {
-      config.docs.apiDocsPrefix = '';
-    }
-    app.use(config.docs.apiDocsPrefix + config.docs.apiDocs, function (req, res) {
-      res.send(specDoc);
-    });
-    if (config.docs.swaggerUi) {
-      var uiHtml = fs.readFileSync(pathModule.join(__dirname, '../swagger-ui/index.html'), 'utf8');
-      uiHtml = uiHtml.replace(/url: "[^"]*"/, 'url: "' + config.docs.apiDocsPrefix + config.docs.apiDocs + '"');
-      fs.writeFileSync(pathModule.join(__dirname, '../swagger-ui/index.html'), uiHtml, 'utf8');
-      if (!config.docs.swaggerUiPrefix) {
-        config.docs.swaggerUiPrefix = '';
-      }
-      app.use(config.docs.swaggerUiPrefix + config.docs.swaggerUi, express.static(pathModule.join(__dirname, '../swagger-ui')));
-    }
-  }
+  // if (config.docs && config.docs.apiDocs) {
+  //   if (!config.docs.apiDocsPrefix) {
+  //     config.docs.apiDocsPrefix = '';
+  //   }
+  //   app.use(config.docs.apiDocsPrefix + config.docs.apiDocs, function (req, res) {
+  //     res.send(specDoc);
+  //   });
+  //   if (config.docs.swaggerUi) {
+  //     var uiHtml = fs.readFileSync(pathModule.join(__dirname, '../swagger-ui/index.html'), 'utf8');
+  //     uiHtml = uiHtml.replace(/url: "[^"]*"/, 'url: "' + config.docs.apiDocsPrefix + config.docs.apiDocs + '"');
+  //     fs.writeFileSync(pathModule.join(__dirname, '../swagger-ui/index.html'), uiHtml, 'utf8');
+  //     if (!config.docs.swaggerUiPrefix) {
+  //       config.docs.swaggerUiPrefix = '';
+  //     }
+  //     app.use(config.docs.swaggerUiPrefix + config.docs.swaggerUi, express.static(pathModule.join(__dirname, '../swagger-ui')));
+  //   }
+  // }
   config.pathsDict = dictionary;
 }
 
diff --git a/node_modules/oas-tools/src/lib/utils.js b/node_modules/oas-tools/src/lib/utils.js
index a80e8c1..63bf5d6 100644
--- a/node_modules/oas-tools/src/lib/utils.js
+++ b/node_modules/oas-tools/src/lib/utils.js
@@ -24,7 +24,7 @@ var validator = require('validator');
 
 var fixNullable = function(schema) {
   Object.getOwnPropertyNames(schema).forEach((property) => {
-    if (typeof schema[property] === 'object') {
+    if (typeof schema[property] === 'object' && schema[property] !== null) {
       fixNullable(schema[property]);
     } else if (property === 'type' && typeof schema[property] === 'string' && schema.nullable === true) {
       schema.type = [schema.type, "null"];
diff --git a/node_modules/oas-tools/src/middleware/oas-validator.js b/node_modules/oas-tools/src/middleware/oas-validator.js
index b4d17e3..a0b800f 100644
--- a/node_modules/oas-tools/src/middleware/oas-validator.js
+++ b/node_modules/oas-tools/src/middleware/oas-validator.js
@@ -149,48 +149,53 @@ function checkRequestData(oasDoc, requestedSpecPath, method, res, req, next) { /
 
 
     for (var i = 0; i < params.length; i++) {
-
-      //TODO: 'required' property is not required, some parameters may not have it (those in query for example)
-
-      if (params[i].required != undefined && params[i].required.toString() == 'true') { //TODO: in case it is not required...there is no validation?
-        var name = params[i].name;
-        var location = params[i].in;
-        var schema = params[i].schema;
-        var value;
-
-        location = locationFormat(location);
-        if (req[location][name] == undefined) { //if the request is missing a required parameter acording to the oasDoc: warning
-          newErr = {
-            message: "Missing parameter " + name + " in " + location + ". "
-          };
-          msg.push(newErr);
-          keepGoing = false;
-        } else { // In case the parameter is indeed present, check type. In the case of array, check also type of its items!
-          try { // eslint-disable-line
-            if (schema.type !== 'string') { // eslint-disable-line
+      var name = params[i].name;
+      var location = params[i].in;
+      var schema = params[i].schema;
+      var value;
+      location = locationFormat(location);
+
+      if (req[location][name] == undefined && params[i].required) { // the request is missing a required parameter acording to the oasDoc
+        newErr = {
+          message: "Missing parameter " + name + " in " + location + ". "
+        };
+        msg.push(newErr);
+        keepGoing = false;
+      } else if (req[location][name] != undefined) { // The parameter is present
+        try { // eslint-disable-line
+          if (schema.type !== 'string') { // eslint-disable-line
+            if (schema.type == 'array') {
+              if (Array.isArray(req[location][name])) {
+                value = req[location][name]
+              }
+              else {
+                value = [req[location][name]]
+              }
+            }
+            else {
               value = JSON.parse(req[location][name]);
-            } else {
-              value = String(req[location][name]);
             }
-          } catch (err) {
+          } else {
             value = String(req[location][name]);
           }
-          err = validator.validate(value, schema);
-          if (err == false) {  // eslint-disable-line
-            keepGoing = false;
-            if (err.code == "UNKNOWN_FORMAT") { // eslint-disable-line
-              var registeredFormats = ZSchema.getRegisteredFormats();
-              logger.error("UNKNOWN_FORMAT error - Registered Formats: ");
-              logger.error(registeredFormats);
-            }
-            newErr = {
-              message: "Wrong parameter " + name + " in " + location + ". ",
-              error: validator.getLastErrors()
-            };
-            msg.push(newErr);
-          } else {
-            logger.info("Valid parameter on request");
+        } catch (err) {
+          value = String(req[location][name]);
+        }
+        err = validator.validate(value, schema);
+        if (err == false) {  // eslint-disable-line
+          keepGoing = false;
+          if (err.code == "UNKNOWN_FORMAT") { // eslint-disable-line
+            var registeredFormats = ZSchema.getRegisteredFormats();
+            logger.error("UNKNOWN_FORMAT error - Registered Formats: ");
+            logger.error(registeredFormats);
           }
+          newErr = {
+            message: "Wrong parameter " + name + " in " + location + ". ",
+            error: validator.getLastErrors()
+          };
+          msg.push(newErr);
+        } else {
+          logger.info("Valid parameter " + name + " in " + location + ". ");
         }
       }
     }
@@ -326,13 +331,8 @@ function convertValue(value, schema, type) { // eslint-disable-line
 
     case 'boolean':
       if (!_.isBoolean(value)) {
-        if (['false', 'true'].indexOf(value) === -1) {
-          value = original; // eslint-disable-line
-        } else {
-          value = value === 'true' || value; // eslint-disable-line
-        }
+          value = value === 'true'; // eslint-disable-line
       }
-
       break;
 
     case 'integer':
